
import pandas as pd
import streamlit as st
from PIL import Image
import time
import datetime as datetime
import webbrowser
import sqlite3
import openpyxl
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfgen import canvas
import PyPDF2
import altair as alt
from datetime import datetime
import pytz
from io import BytesIO
from streamlit_extras.metric_cards import style_metric_cards
from streamlit_extras.colored_header import colored_header
from streamlit_extras.dataframe_explorer import dataframe_explorer

novo_fuso_horario = pytz.timezone('America/Sao_Paulo')
hora_atual = datetime.now().replace(microsecond=0)
hora_atual_no_novo_fuso = hora_atual.astimezone(novo_fuso_horario)
data_hora_com_fuso = str(hora_atual_no_novo_fuso)
data_hora_obj = datetime.strptime(data_hora_com_fuso, "%Y-%m-%d %H:%M:%S%z")
horas = data_hora_obj.strftime("%H")
minutos = data_hora_obj.strftime("%M")
segundos = data_hora_obj.strftime("%S")
timenow = (f"{horas}:{minutos}:{segundos}")

#timenow = datetime.now().replace(microsecond=0).time()
datenow = datetime.now().date()
monthnow = datetime.now().strftime('%B')
monthnumbernow = datetime.now().month

# CONFIGURA√á√ÉO DA P√ÅGINA
st.set_page_config(
    page_title=('MANUTEN√á√ÉO SSM SOLAR DO BRASIL'),
    page_icon='ü¶æ',
    layout='wide',
    initial_sidebar_state='expanded',
    menu_items={""
        'Get Help': 'http://www.meusite.com.br',
        'Report a bug': "http://www.meuoutrosite.com.br",
        'About': "Na duvida,duvide!"
    }
)

style_metric_cards()
# --- Criar o dataframe
df = pd.read_excel(
    io = './Datasets/system_extraction.xlsx',
    engine='openpyxl',
    sheet_name='salesreport',
    usecols='A:D',
    nrows=12
)
senha = ()
with st.sidebar:
    logo_teste = Image.open('./Midia/sales.jpeg')
    st.image(logo_teste, width=300)
    st.subheader('MANUTEN√á√ÉO SSM SOLAR DO BRASIL')
    img = Image.open('./Midia/user.png')
    with st.form('Logon'):
        st.image(img,width=100)
        fLIDERES = st.selectbox(
        "Lideres:",
        options=df['LIDERES'].unique()
        ,placeholder='Selecione!')
        fSETOR = st.selectbox(
        "Setores:",
        options=df['SETOR'].unique()
        ,placeholder='Selecione!')
        if senha == '1409':
           st.write('ok')
        else:
            senha = st.text_input('Ensira sua senha:',type="password")
        st.form_submit_button('Entrar')
    with st.spinner("Carregando..."):
        st.write("Bem Vindo!")
    with st.expander('#$#$'):
        st.success('Nada al√©m de um homem comum,com pensamentos comuns!')

if fLIDERES == 'Selecione' and fSETOR == 'Selecione' and senha == '47297913':
    col,col1,col2,col3 = st.columns([1,1,1,1])
    with open("./Data/Setores", 'rb') as file:
        with col:
            st.write('Dados de O.S de todos setores:')
            st.download_button(
                label="BAIXAR DADOS",
                key= "download_button",
                data= file,
                file_name="Setores",
                mime='application/octet-stream'
                )
    
    with open("./Data/Materiais", 'rb') as file:
        with col1:
            st.write('Dados da tabela de materiais:')
            st.download_button(
                label="BAIXAR DADOS ",
                key= "download_button ",
                data= file,
                file_name="Materiais ",
                mime='application/octet-stream '
                )
     
if 'OS' not in st.session_state:
    st.session_state.OS = 0
if 'BANCOS' == 'BANCOS':
    conn = sqlite3.connect('./Data/Setores')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS ELETRICA (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        ESPECIALIDADE,
        Local,
        M√äS,
        SEGMENTO TEXT,  
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
                
        )
'''   )
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Ferramentaria (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
                   
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS PRODUCAO(
                   
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,
        SEGMENTO TEXT,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)           
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Administrativo (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)        
       
                   
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Comercial (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
       
                   
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS EXPEDICAO (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,         
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
                          
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS Serralharia (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,           
        Local,
        M√äS,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
       
                   
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS MECANICA (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        ESPECIALIDADE,           
        Local,
        M√äS,
        SEGMENTO TEXT,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)   
       
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS TI (
        OS INTEGER PRIMARY KEY,
        SOLICITANTE TEXT,
        SETOR TEXT,
        OCORRENCIA TEXT,
        PARADA TEXT,
        GRAU TEXT,
        DATA DATE,
        HORA TIME,
        A√á√ÉO TEXT,
        FINALIZADA TEXT,
        DATAF,
        HORAF,
        MANUTENTOR,
        ESPECIALIDADE,
        Local,
        M√äS,
        FOREIGN KEY (OS) REFERENCES ids (ID_UNIC)
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS ids (
        ID_UNIC INTEGER PRIMARY KEY,
        HORA TIME,
        HORAF TIME,
        DATA DATE,
        M√™s TEXT,
        MAQUINA
                
    )
                   
''') 
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS checklist (
        ID_UNIC INTEGER PRIMARY KEY,
        Tag,
        Local,
        Equipamento,
        Situa√ß√£o,
        Check_1,     
        Check_2,
        Check_3,
        Check_4,
        Check_5,
        Check_6,
        Check_7,
        Check_8,
        Check_9,
        Relatorio,
        Hora TIME,
        Data DATE,
        M√™s TEXT
             
    )
''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS checklistM(
        ID_UNIC INTEGER PRIMARY KEY,
        Tag,
        Local,
        Equipamento,
        Situa√ß√£o,
        Check_1,     
        Check_2,
        Check_3,
        Check_4,
        Check_5,
        Check_6,
        Check_7,
        Check_8,
        Check_9,
        Relatorio,
        Hora TIME,
        Data DATE,
        M√™s TEXT
             
    )
''')

    conn1 = sqlite3.connect('./Data/imagens_a_f')
    cursor1 = conn1.cursor()
    cursor1.execute('''
    CREATE TABLE IF NOT EXISTS imagens (
        id INTEGER PRIMARY KEY,
        imagem_abertura BLOB,
        imagem_finalizada BLOB,
        mes TEXT,
        FOREIGN KEY (id) REFERENCES ids (ID_UNIC)
        
    )
''')
    conn12 = sqlite3.connect('./Data/Materiais')
    cursor12 = conn12.cursor()

    conn14 = sqlite3.connect('./Data/Meses')
    cursor14 = conn14.cursor()

#cl = st.button("DELETAR TABELAS")
#if cl:
   #cursor.execute("DROP TABLE ELETRICA")
   #cursor.execute("DROP TABLE MECANICA")
   #cursor1.execute("DROP TABLE imagens")
   #cursor.execute("DROP TABLE Ferramentaria")
   #cursor.execute("DROP TABLE PRODUCAO")
   #cursor.execute("DROP TABLE Administrativo")
   #cursor.execute("DROP TABLE Comercial")
   #cursor.execute("DROP TABLE EXPEDICAO")
   #cursor.execute("DROP TABLE TI")
   #cursor.execute("DROP TABLE Serralharia")
   #cursor.execute("DROP TABLE ids")
   #cursor.execute("DROP TABLE checklist")
   #conn.commit()

#leitura do banco ELETRICA
allln = pd.read_sql_query("SELECT * FROM ELETRICA", conn)
allln1 = allln.shape[0]
consulta1 = "SELECT * FROM ELETRICA"
allinhas = pd.read_sql_query(consulta1, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta2 = "SELECT * FROM ELETRICA WHERE FINALIZADA = 'N√£o'"
whrlinhas1 = pd.read_sql_query(consulta2, conn)
whrlinhas2 = whrlinhas1.shape[0] 

#O.S FINALIZADAS
consulta3 = "SELECT * FROM ELETRICA WHERE FINALIZADA = 'Sim'"
whrlinhas3 = pd.read_sql_query(consulta3, conn)
whrlinhas4 = whrlinhas3.shape[0]

if 'Ferramentaria' == 'Ferramentaria':
    #feedback Ferramentaria
    allln13 = pd.read_sql_query("SELECT * FROM Ferramentaria", conn)
    allln14 = allln13.shape[0]

    query = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'N√£o'"
    rd2 = pd.read_sql_query(query, conn)
    rd3 = rd2.shape[0]

    query1 = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'Sim'"
    rd = pd.read_sql_query(query1, conn)
    rd1 = rd.shape[0]

    query = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd25 = pd.read_sql_query(query, conn)
    rd26 = rd25.shape[0]

    query1 = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd27 = pd.read_sql_query(query1, conn)
    rd28 = rd27.shape[0]

    query = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd29 = pd.read_sql_query(query, conn)
    rd30 = rd29.shape[0]

    query1 = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd31 = pd.read_sql_query(query1, conn)
    rd32 = rd31.shape[0]

if 'Produ√ß√£o'=='Produ√ß√£o':
    #FEEDBACK Produ√ß√£o
    query = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'N√£o'"
    rd6 = pd.read_sql_query(query, conn)
    rd7 = rd6.shape[0]

    query1 = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'Sim'"
    rd4 = pd.read_sql_query(query1, conn)
    rd5 = rd4.shape[0]

    allln15 = pd.read_sql_query("SELECT * FROM PRODUCAO", conn)
    allln16 = allln15.shape[0]

    query = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd33 = pd.read_sql_query(query, conn)
    rd34 = rd33.shape[0]

    query = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd35 = pd.read_sql_query(query, conn)
    rd36 = rd35.shape[0]

    query = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd37 = pd.read_sql_query(query, conn)
    rd38 = rd37.shape[0]

    query = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd39 = pd.read_sql_query(query, conn)
    rd40 = rd39.shape[0]

    allln15 = pd.read_sql_query("SELECT * FROM PRODUCAO", conn)
    allln16 = allln15.shape[0]
    consulta9 = "SELECT * FROM PRODUCAO"
    allinhas16 = pd.read_sql_query(consulta9, conn)

    #O.S ABERTAS  N√ÉO FINALIZADAS
    consulta10 = "SELECT * FROM PRODUCAO WHERE FINALIZADA = 'N√£o'"
    whrlinhas18 = pd.read_sql_query(consulta10, conn)
    whrlinhas19 = whrlinhas18.shape[0]

    #O.S FINALIZADAS
    cursor.execute("SELECT * FROM PRODUCAO WHERE FINALIZADA = ?;", ('Sim',))
    whrlinhas20 = cursor.fetchall()
    whrlinhas21 = pd.DataFrame(whrlinhas20)
    whrlinhas22 = whrlinhas21.shape[0]

if 'Administrativo' == 'Administrativo':
    #FEEDBACK Administrativo
    query = "SELECT * FROM Administrativo WHERE FINALIZADA = 'N√£o'"
    rd10 = pd.read_sql_query(query, conn)
    rd11 = rd10.shape[0]

    query1 = "SELECT * FROM Administrativo WHERE FINALIZADA = 'Sim'"
    rd8 = pd.read_sql_query(query1, conn)
    rd9 = rd8.shape[0]

    allln17 = pd.read_sql_query("SELECT * FROM Administrativo", conn)
    allln18 = allln17.shape[0]

    query = "SELECT * FROM Administrativo WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd41 = pd.read_sql_query(query, conn)
    rd42 = rd41.shape[0]

    query = "SELECT * FROM Administrativo WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd43 = pd.read_sql_query(query, conn)
    rd44 = rd43.shape[0]

    query = "SELECT * FROM Administrativo WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd45 = pd.read_sql_query(query, conn)
    rd46 = rd45.shape[0]

    query = "SELECT * FROM Administrativo WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd47 = pd.read_sql_query(query, conn)
    rd48 = rd47.shape[0]

if 'Comercial' == 'Comercial':
    #FEEDBACK Comercial
    query = "SELECT * FROM Comercial WHERE FINALIZADA = 'N√£o'"
    rd14 = pd.read_sql_query(query, conn)
    rd15 = rd14.shape[0]

    query1 = "SELECT * FROM Comercial WHERE FINALIZADA = 'Sim'"
    rd12 = pd.read_sql_query(query1, conn)
    rd13 = rd12.shape[0]

    allln19 = pd.read_sql_query("SELECT * FROM Comercial", conn)
    allln20 = allln19.shape[0]

    query = "SELECT * FROM Comercial WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd49 = pd.read_sql_query(query, conn)
    rd50 = rd49.shape[0]

    query = "SELECT * FROM Comercial WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd51 = pd.read_sql_query(query, conn)
    rd52 = rd51.shape[0]

    query = "SELECT * FROM Comercial WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd53 = pd.read_sql_query(query, conn)
    rd54 = rd53.shape[0]

    query = "SELECT * FROM Comercial WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd55 = pd.read_sql_query(query, conn)
    rd56 = rd55.shape[0]

if 'Expedi√ß√£o' == 'Expedi√ß√£o':
    query = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'N√£o'"
    rd18 = pd.read_sql_query(query, conn)
    rd19 = rd18.shape[0]

    query1 = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'Sim'"
    rd16 = pd.read_sql_query(query1, conn)
    rd17 = rd16.shape[0]

    allln21 = pd.read_sql_query("SELECT * FROM EXPEDICAO", conn)
    allln22 = allln21.shape[0]

    query = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd57 = pd.read_sql_query(query, conn)
    rd58 = rd57.shape[0]

    query = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd59 = pd.read_sql_query(query, conn)
    rd60 = rd59.shape[0]

    query = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd61 = pd.read_sql_query(query, conn)
    rd62 = rd61.shape[0]

    query = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd63 = pd.read_sql_query(query, conn)
    rd64 = rd63.shape[0]

if 'Serralharia' == 'Serralharia':
    #FEEDBACK Serralharia
    query = "SELECT * FROM Serralharia WHERE FINALIZADA = 'N√£o'"
    rd22 = pd.read_sql_query(query, conn)
    rd23 = rd22.shape[0]

    query1 = "SELECT * FROM Serralharia WHERE FINALIZADA = 'Sim'"
    rd20 = pd.read_sql_query(query1, conn)
    rd21 = rd20.shape[0]

    allln23 = pd.read_sql_query("SELECT * FROM Serralharia", conn)
    allln24 = allln23.shape[0]

    query = "SELECT * FROM Serralharia WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
    rd65 = pd.read_sql_query(query, conn)
    rd66 = rd65.shape[0]

    query = "SELECT * FROM Serralharia WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
    rd67 = pd.read_sql_query(query, conn)
    rd68 = rd67.shape[0]

    query = "SELECT * FROM Serralharia WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
    rd69 = pd.read_sql_query(query, conn)
    rd70 = rd69.shape[0]

    query = "SELECT * FROM Serralharia WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
    rd71 = pd.read_sql_query(query, conn)
    rd72 = rd71.shape[0]

if 'PCM' == 'PCM':
   consulta3 = "SELECT * FROM PCM WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'El√©trica'"
   pcm = pd.read_sql_query(consulta3, conn)
   pcm_id = pcm.shape[0]

   consulta3 = "SELECT * FROM PCM WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'El√©trica'"
   pcm1 = pd.read_sql_query(consulta3, conn)
   pcm_id1 = pcm1.shape[0]

   consulta3 = "SELECT * FROM PCM WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'Mec√¢nica'"
   pcm2 = pd.read_sql_query(consulta3, conn)
   pcm_id2 = pcm2.shape[0]

   consulta3 = "SELECT * FROM PCM WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'Mec√¢nica'"
   pcm3 = pd.read_sql_query(consulta3, conn)
   pcm_id3 = pcm3.shape[0]

if 'strs' == 'strs':
    solicitante_titulo = 'Insira o solicitante:'
    solicitante_titulo_atl = 'Atualize o solicitante:'
    ocorrencia_titulo = 'Ensira detalhes da ocorr√™ncia:'
    ocorrencia_titulo_atl = 'Atualize √° ocorr√™ncia:'
    setor_titulo = 'Setor solicitante:'
    setor_titulo_atl ='Aualize o Setor:'
    nivel_de_ocorrencia_titulo = 'Nivel da ocorr√™ncia:'
    nivel_de_ocorrencia_titulo_atl = 'Atualize o nivel da ocorr√™ncia:'
    acao_titulo = 'Tipo de a√ß√£o:'
    acao_titulo_atl = 'Atualize o tipo da a√ß√£o:'
    parada_titulo = 'Gerou interrup√ß√£o no funcionamento?:'
    especialidades_titulo = 'Especifique o tipo de ocorr√™ncia:'
    especialidades_titulo_atl = 'Atualize o tipo de ocorr√™ncia:'
    local_titulo = 'Localidade:'
    manutentor_titulo = 'Tipo de manuten√ß√£o'

    help_solicitante = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o responsavel por setor que fez a solicita√ß√£o de O.S '
    help_ocorr√™ncia = 'Nesta caixa de sele√ß√£o: voc√™ precisa inserir a ocorr√™nica que ir√° realizar '
    help_setor = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o setor do lider que fez a solicita√ß√£o de 0.S '
    help_nivel_ocorrencia = 'Nesta caixa de sele√ß√£o: voc√™ precida selecionar o grau de necessidade da ocorr√™ncia '
    helpe_acao = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o tipo de a√ßa√µ da ocorr√™ncia solicitada'
    help_parada = 'Nesta caixa de sele√ß√£o: voc√™ precisa informar se ouve uma interrup√ß√£o no funcionamento do equipamento'
    help_especialidade = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o tipo de atividade que ir√° ser aplicada com base na ocorr√™ncia'
    help_local = 'Nesta caixa de sele√ß√£o: voc√™ preicsa selecionar o equipamento/local que ir√° realizar a manuten√ß√£o'
    help_imagem = 'Nesta caixa de sele√ß√£o: voc√™ precisa anexar uma imagem referente a ocorr√™ncia'
    help_imagem_fnlzd = 'Nesta caixa de sele√ß√£o: voc√™ precisa anexar uma imagem ap√≥s finalizar a ocorrencia'
    help_manutentor = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o tipo de manuten√ß√£o referente a sua ocorr√™ncia'
    help_numero_os = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar o numero da O.S que deseja ABRIR ou FINALIZAR'
    help_finalizar_os = 'Nesta caixa de sele√ß√£o: voc√™ precisa selecionar entre SIM ou N√£o,SIM,para O.S finalizada,N√£o,para O.S aberta'
    solicitante_list = ['Bruno Kappaun','Cesar Filho','Jameson Sales','Maurilio Sales/Alex Santos','Adriely Lemos','Gilson Freitas','Willian Oliveira','Cesar Augusto','Filipe leite']
    setor_list = ['Tecnologia da Informa√ß√£o','Comercial','Expedi√ß√£o','Administrativo','Ferramentaria','Serralharia','Utilidades','Produ√ß√£o']
    ocorrencia_list = ['Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte']
    acao_list = ['Corretiva','Preventiva','Preditiva','Confec√ß√£o','Montagem']
    especialidade_list = ['Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem','Limpeza']
    
    extrus√£o_list = ['Prensa - P8','Puller - 01','Puller - 02','Quench','Esticadeira - HEAD','Esticadeira - TAIL','Forno de Tarugo','Forno de Ferramentas','Serra Fria','Forno de Envelhecimento','T1 - Belts','T2 - Belts','T3 - Belts','T4 - Belts']
    extrus√£o_list_√¢ = ['√Çmbito de extrus√£o','Prensa - P8','Puller - 01','Puller - 02','Quench','Esticadeira - HEAD','Esticadeira - TAIL','Forno de Tarugo','Forno de Ferramentas','Serra Fria','Forno de Envelhecimento','T1 - Belts','T2 - Belts','T3 - Belts','T4 - Belts']

    estampo_list = ['Prensa Exc√™ntrica - 01','Prensa Exc√™ntrica - 02','Prensa Hidr√°ulica = 03']
    estampo_list_√¢ = ['√Çmbito de estampo','Prensa Exc√™ntrica - 01','Prensa Exc√™ntrica - 02','Prensa Hidr√°ulica = 03']
    
    corte = ['Serra Automatica','Serra Manual','Serra fita - FRANHO']
    corte_√¢ = ['√Çmbito de corte','Serra Automatica','Serra Manual','Serra fita - FRANHO']
    
    rosca_e_furo = ['Rosqueadeira - MACHO 01','Rosqueadeira - COSSINETE 01','Rosqueadeira - COSSINETE 02']
    rosca_e_furo_√¢ = ['√Çmbito de rosca e furo','Rosqueadeira - MACHO 01','Rosqueadeira - COSSINETE 01','Rosqueadeira - COSSINETE 02']
    
    embalagem = ['Embaladora Automatica','Seladora manual - KT001','Seladora manual - KT002']
    embalagem_√¢ = ['√Çmbito de embalagem','Embaladora Automatica','Seladora manual - KT001','Seladora manual - KT002']

    ti = ['Manuten√ß√£o Predial','Suporte']
    ti_√¢ = ['√Çmbito da Tecnlogia da Informa√ß√£o','Manuten√ß√£o Predial','Suporte']

    utilidades_list = ['Manuten√ß√£o Predial','Casa de Bombas','Caixa D.Agua','Subesta√ß√£o - 01','Subesta√ß√£o - 02','Port√£o de automoveis','Port√£o de pedestres','Interfone','Esg√¥to','Caixas pluviais']
    utilidades_list_√¢ = ['√Çmbito da Casa de Bombas','√Çmbito da Caixa D.Agua','√Çmbito da Subesta√ß√£o - 01','√Çmbito da Subesta√ß√£o - 02','√Çmbito do Port√£o de automoveis','√Çmbito do Port√£o de pedestres','√Çmbito do Interfone']
    
    comercial = ['Manuten√ß√£o Predial']
    comercial_√¢ = ['√Çmbito do Comercial']

    administrativo = ['Manuten√ß√£o Predial','Casa de Bombas','Caixa D.Agua','Port√£o de automoveis','Port√£o de pedestres','Interfone','Esg√¥to','Caixas pluviais']
    administrativo_√¢ = ['√Çmbito da Casa de Bombas','√Çmbito da Caixa D.Agua','√Çmbito do Port√£o de automoveis','√Çmbito do Port√£o de pedestres','√Çmbito do Interfone']

    ferramentaria_list = ['Manuten√ß√£o Predial','Maquina de jatear','Talha El√©trica','Recupera√ß√£o de ferramentas']
    ferramentaria_list_√¢ = ['√Çmbito da Ferramentaria','√Çmbito da Maquina de jatear','√Çmbito da Talha El√©trica']
        
    expedi√ß√£o = ['Manuten√ß√£o Predial']
    expedi√ß√£o_√¢ = ['√Çmbito da Expedi√ß√£o']
    geral_list = ['Prensa - P8 - Puller - 1 - Puller - 2 - Esticadeira - HEAD - Esticadeira - TAIL - Forno de Tarugo - Serra Fria - Forno de Envelhecimento - Prensa Excentrica - 1 - Prensa Excentrica - 2 - Serra Automatica - Serra Manual - Serra fita - FRANHO - Rosqueadeira - MACHO 01 - Rosqueadeira - COSSINETE 01 - Rosqueadeira - COSSINETE 2 - Maquina de jatear - Talha El√©trica - Embaladora Automatica - Manuten√ß√£o Predial - Art√≠fice - Recupera√ß√£o de ferramentas - Casa de Bombas - Caixa D.Agua - Subesta√ß√£o - 1 - Subesta√ß√£o - 2 -  Seladora manual - KT001 - Seladora manual - KT002 - Port√£o de automoveis - Port√£o de pedestres - Interfone']
    
    tabs_list = ["üìù Cadastro de O.S", " üîö Finalizar O.S","üìñ O.S Em aberto","‚úÖ O.S Finalizadas","‚òë CheckList","üëÅ Geral"]
    tabs_list_sol = ["üìù Cadastro de O.S","üìñ O.S Em aberto ","‚úÖ O.S Finalizadas","üëÅ Geral"]
    tltle_list  = 'Status e informa√ß√µes de :blue[O.S]'
    header_list = 'üìù Cadastro de :blue[O.S]'
    aviso_list = 'üëÅ :blue[Geral]'
    abertas_list = 'üìñ O.S em aberto'
    finalizadas_list = "‚úÖ O.S Finalizadas"

if 'OI' == 'OI':
   consulta3 = "SELECT * FROM ids"
   ids = pd.read_sql_query(consulta3, conn)
   ids_shape = ids.shape[0]


if 'OS' not in st.session_state:
    st.session_state.OS = 0
if 'FIN' not in st.session_state:
    st.session_state.FIN = 0

query = "SELECT * FROM TI WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'EL√âTRICA'"
rd74 = pd.read_sql_query(query, conn)
rd75 = rd74.shape[0]

query = "SELECT * FROM TI WHERE FINALIZADA = 'Sim' AND MANUTENTOR = 'MEC√ÇNICA'"
rd76 = pd.read_sql_query(query, conn)
rd77 = rd76.shape[0]

query = "SELECT * FROM TI WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'EL√âTRICA'"
rd78= pd.read_sql_query(query, conn)
rd79 = rd78.shape[0]

query = "SELECT * FROM TI WHERE FINALIZADA = 'N√£o' AND MANUTENTOR = 'MEC√ÇNICA'"
rd80 = pd.read_sql_query(query, conn)
rd81 = rd80.shape[0]

caminho_imagem = './Midia/empty.jpeg'
with open(caminho_imagem, 'rb') as arquivo_imagem:
    bytes_imagem = arquivo_imagem.read()
#EL√âTRICA
if fLIDERES == 'Equipe de EL√âTRICA':
    if fSETOR == 'El√©trica':
        if senha == '1409':
            #cl1 = st.button("DELETAR TABELA")
            #if cl1:
                #cursor.execute("DROP TABLE ELETRICA")
                #conn.commit()
            #image = Image.open('./Midia/ssmm.jpg')
            col1,col2 = st.columns([10,1])
            with col1:
                st.title(tltle_list)
            tab6, tab7,tab8,tab9,tab10,tab11= st.tabs(tabs_list)
            with tab6:
                st.header(header_list,divider='blue')
                colibrim,neymar= st.columns([5,5])  
                with colibrim:
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if allln1 == 0:
                           numros = 0
                           numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln1,value=allln1,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM ELETRICA"
                        ros_oc = pd.read_sql_query(consulta1, conn)

                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]
            
                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, (solicitante_list),index=None,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, (solicitante_list),index=None,placeholder='Atualize!',help=help_solicitante)
                        
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, (setor_list),index=None,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                        
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl, (setor_list),index=None,placeholder='Atualize!',help=help_setor)
                        Rsetor = ''

                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, (ocorrencia_list),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,(ocorrencia_list),index=None, placeholder='Atualize!',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, (acao_list),index=None,placeholder='Selecione!',help=helpe_acao)
                        RUacao = ' '
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, (acao_list),index=None,placeholder='Atualize!',help=helpe_acao)
                        Racao = ' '

                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not atd1:
                            segmento = container.selectbox('Defina o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Selecione!',help=help_setor)
                        if atd1:
                            segmento = container.selectbox('Atualize o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Atualize!',help=help_setor)
                        if not segmento == None:
                            comb = (f'{Rsetor} {segmento} {Racao}')
                    else:
                        comb = (f'{Rsetor} {Racao}')
                    
                    if not atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    if atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    
                    if not atd1: 
                        especialidades = container.selectbox(especialidades_titulo, (especialidade_list),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl, (especialidade_list),index=None,placeholder='Atualize!',help=help_especialidade)
                    
                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not segmento == None:
                            if comb == 'Produ√ß√£o Extrus√£o Corretiva' or comb == 'Produ√ß√£o Extrus√£o Preventiva' or comb == 'Produ√ß√£o Extrus√£o Preditiva':
                                Local = container.selectbox(local_titulo,(extrus√£o_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Extrus√£o Confec√ß√£o' or comb == 'Produ√ß√£o Extrus√£o Montagem':
                                Local = container.selectbox(local_titulo,(extrus√£o_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Estampo Corretiva' or comb == 'Produ√ß√£o Estampo Preventiva' or comb == 'Produ√ß√£o Estampo Preditiva':
                                Local = container.selectbox(local_titulo,(estampo_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Estampo Confec√ß√£o' or comb == 'Produ√ß√£o Estampo Montagem':
                                Local = container.selectbox(local_titulo,(estampo_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Embalagem Corretiva' or comb == 'Produ√ß√£o Embalagem Preventiva' or comb == 'Produ√ß√£o Embalagem Preditiva':
                                Local = container.selectbox(local_titulo,(embalagem),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Embalagem Confec√ß√£o' or comb == 'Produ√ß√£o Embalagem Montagem':
                                Local = container.selectbox(local_titulo,(embalagem_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Rosca e Furo Corretiva' or comb == 'Produ√ß√£o Rosca e Furo Preventiva' or comb == 'Produ√ß√£o Rosca e Furo Preditiva':
                                Local = container.selectbox(local_titulo,(rosca_e_furo),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Rosca e Furo Confec√ß√£o' or comb == 'Produ√ß√£o Rosca e Furo Montagem':
                                Local = container.selectbox(local_titulo,(rosca_e_furo_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Corte Corretiva' or comb == 'Produ√ß√£o Corte Preventiva' or comb == 'Produ√ß√£o Corte Preditiva':
                                Local = container.selectbox(local_titulo,(corte),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Corte Confec√ß√£o' or comb == 'Produ√ß√£o Corte Montagem':
                                Local = container.selectbox(local_titulo,(corte_√¢),index=None,placeholder= 'Selecione!',help=help_local) 
                        else:
                            Local = ''
                    else:
                        segmento = 'sem segmento'
                        if comb == 'Tecnologia da Informa√ß√£o Corretiva' or comb == 'Tecnologia da Informa√ß√£o Preventiva' or comb == 'Tecnologia da Informa√ß√£o Preditiva':
                            Local = container.selectbox(local_titulo,(ti),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Tecnologia da Informa√ß√£o Confec√ß√£o' or comb == 'Tecnologia da Informa√ß√£o Montagem':
                            Local = container.selectbox(local_titulo,(ti_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        else:
                            Local = ' '

                        if comb == 'Administrativo Corretiva' or comb == 'Administrativo Preventiva' or comb == 'Administrativo Preditiva':
                            Local = container.selectbox(local_titulo,(administrativo),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Administrativo Confec√ß√£o' or comb == 'Administrativo Montagem':
                            Local = container.selectbox(local_titulo,(administrativo_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        
                        if comb == 'Comercial Corretiva' or comb == 'Comercial Preventiva' or comb == 'Comercial Preditiva':
                            Local = container.selectbox(local_titulo,(comercial),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Comercial Confec√ß√£o' or comb == 'Comercial Montagem':
                            Local = container.selectbox(local_titulo,(comercial_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        
                        if comb == 'Expedi√ß√£o Corretiva' or comb == 'Expedi√ß√£o Preventiva' or comb == 'Expedi√ß√£o Preditiva':
                            Local = container.selectbox(local_titulo,(expedi√ß√£o),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Expedi√ß√£o Confec√ß√£o' or comb == 'Expedi√ß√£o Montagem':
                            Local = container.selectbox(local_titulo,(expedi√ß√£o_√¢),index=None,placeholder= 'Selecione!',help=help_local)

                        if comb == 'Ferramentaria Corretiva' or comb == 'Ferramentaria Preventiva' or comb == 'Ferramentaria Preditiva':
                            Local = container.selectbox(local_titulo,(ferramentaria_list),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Ferramentaria Confec√ß√£o' or comb == 'Ferramentaria Montagem':
                            Local = container.selectbox(local_titulo,(ferramentaria_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)

                        if comb == 'Utilidades Corretiva' or comb == 'Utilidades Preventiva' or comb == 'Utilidades Preditiva':
                            Local = container.selectbox(local_titulo,(utilidades_list),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Utilidades Confec√ß√£o' or comb == 'Utilidades Montagem':
                            Local = container.selectbox(local_titulo,(utilidades_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                       
                    if atd1:
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        agree = container.checkbox('Selecione √° caixa para enviar a imagem em outro momento:')
                        if agree:
                            uploaded_files = bytes_imagem
                            bytes_data = bytes_imagem
                        else:
                             uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                             for uploaded_file in uploaded_files:
                                 bytes_data = uploaded_file.read()

                with neymar:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln1)
                        if allln1 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec = allinhas.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=int(preenchimento[0]),value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM ELETRICA WHERE OS = {numero_da_os};')
                                conn.commit()

                if fLIDERES == 'Equipe de EL√âTRICA':
                    if fSETOR == 'El√©trica':
                        if senha == '1409':
                            if atd1:
                                atl = st.button('Atualize ‚Üª')
                                if atl:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{numero_da_os}] Atualizada!')
                                    cursor.execute("UPDATE ELETRICA SET SOLICITANTE = ?, SETOR = ?,OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ?, LOCAL = ?, ESPECIALIDADE = ? WHERE OS = ?",(RUsolicitante, RUsetor, RUstatus,RUniveldaocorrencia,RUacao,Local,especialidades,int(preenchimento[0])))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem = ? WHERE id = ?",(bytes_data,numros))
                                    conn1.commit()
                                                                          
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files,parada]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[8] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_el√©trica = ids_shape + 1
                                        st.balloons()
                                        st.toast('Enviando O.S!')
                                        st.toast(f'O.S [{ids_shape_el√©trica}] Enviada!')
                                        time.sleep(0.5)
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_el√©trica,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO ELETRICA (OS,SOLICITANTE,SETOR,SEGMENTO,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,ESPECIALIDADE,LOCAL,M√äS,PARADA) VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)", (ids_shape_el√©trica , Rsolicitante, Rsetor,segmento,Rstatus,Rniveldaocorrencia,datenow,str(timenow),Racao,'N√£o',None,None,especialidades,Local,monthnow,parada))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_el√©trica,bytes_data,monthnow))
                                        conn1.commit()
                                        st.rerun()
            #FINALIZAR                                 
            with tab7:
                st.header('üîö Finalizar O.S ‚úî',divider='blue')
                jefferson,lourdes=st.columns(2)
                with jefferson:
                    containerx = st.container(border=True)
                    setorescolhido = containerx.selectbox('Setor', ('PCM','Tecnologia da Informa√ß√£o','Comercial','Administrativo','Expedi√ß√£o','Produ√ß√£o','Ferramentaria','Serralharia','El√©trica'),index=None,placeholder='Selecione!',help=help_solicitante)
                    fnlz2 = containerx.number_input("Selecione o numero da O.S que deseja Finalizar",min_value=1,max_value=1000,value=1,placeholder="Selecione!",help=help_numero_os)
                    fnlz3 = fnlz2-1
                    finalizar = containerx.selectbox('O.S finalizada?', ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_finalizar_os)
                    imagem_finalzida = containerx.file_uploader("Envie uma imagem da ocorr√™ncia finalizada:", accept_multiple_files=True)
                    for uploaded_file in imagem_finalzida:
                        imagem_finalzida_bytes = uploaded_file.read()
                    #datainput = containerx.date_input("Data", value=None)
                    #containerx.write(datainput)
                    #timeinput = containerx.time_input('HORA', value=None)
                    #containerx.write(timeinput)
    
                if fLIDERES == 'Equipe de EL√âTRICA':
                    if fSETOR == 'El√©trica':
                        if imagem_finalzida:
                            if setorescolhido == 'Ferramentaria':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Ferramentaria SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'El√©trica':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE ELETRICA SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 
                                    

                            if setorescolhido == 'Produ√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE PRODUCAO SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 
                            
                            if setorescolhido == 'Administrativo':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Administrativo SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 
                            
                            if setorescolhido == 'Comercial':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Comercial SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'Expedi√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE EXPEDICAO SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'Serralharia':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Serralharia SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'Tecnologia da Informa√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE TI SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'PCM':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor14.execute("UPDATE PCM SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(imagem_finalzida_bytes,fnlz2))
                                    conn1.commit() 
            #ABERTAS
            with tab8:
                st.header('üìù O.S em Aberto', divider='blue')
                jam,jam1 = st.columns([0.2,1])
                with jam:
                    with st.expander("Filtros"):
                        genre = st.radio(
                          "Selecione!",
                        ["EL√âTRICA","Por Data"],
                        index=0,
                        )
          
                with st.expander(f"Minhas OS ({whrlinhas2})"):
                    diferent1,diferent2 = st.columns([0.2,0.00000000000001])
                    if genre == 'Por Data':
                        with diferent1:
                            cls = st.date_input('Escolha √° data')
                            status = str(cls)
                            consulta3 = f"SELECT * FROM ELETRICA WHERE FINALIZADA = 'N√£o' AND DATA = '{status}'"
                            whrlinhas90 = pd.read_sql_query(consulta3, conn)
                            whrlinhas91 = whrlinhas90.shape[0]
                        if whrlinhas91 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=whrlinhas91,value=whrlinhas91,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas2)
                            numros3 = numros2-1
                            osespec = whrlinhas90.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width2")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width2)
                        with diferent2:
                            st.button('‚Üª')
                    
                    else:
                        if not whrlinhas2 == 0:
                            numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=whrlinhas2,value=whrlinhas2,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas2)
                            numros3 = numros2-1
                        if whrlinhas2 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec = whrlinhas1.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width3")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width3)
                
                with st.expander("PCM" f' ({pcm_id})'):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if pcm_id == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da k OS",min_value=1,max_value=pcm_id,value=pcm_id,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=pcm_id)
                            numros5 = numros4-1
                            osespec = pcm.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width6")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width6)

                #Ferramentaria   
                st.markdown('----------')
                with st.expander("Ferramentaria"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd28 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=rd28,value=rd28,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd28)
                            numros5 = numros4-1
                            osespec = rd27.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width4")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width4)
                
                #Produ√ß√£o
                with st.expander("Produ√ß√£o"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd34 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero   da   OS",min_value=1,max_value=rd34,value=rd34,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd34)
                            numros5 = numros4-1
                            osespec = rd33.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width5")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width5)
            
                #Administrativo
                with st.expander("Administrativo"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd42 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione   o  numero   da   OS",min_value=1,max_value=rd42,value=rd42,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd42)
                            numros5 = numros4-1
                            osespec = rd41.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width7")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width7)
            
                with st.expander("Comercial"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd50 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input(" Selecione   o  numero   da   OS",min_value=1,max_value=rd50,value=rd50,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd50)
                            numros5 = numros4-1
                            osespec = rd49.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width9")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width9)

                #Expedi√ß√£o
                with st.expander("Expedi√ß√£o"):
                  if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd58 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("  Selecione   o  numero   da   OS",min_value=1,max_value=rd58,value=rd58,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd58)
                            numros5 = numros4-1
                            osespec = rd57.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width11")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width11)
            
                #Serralharia
                with st.expander("Serralharia"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd66 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da O.S                                ",min_value=1,max_value=rd66,value=rd66,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd66)
                            numros5 = numros4-1
                            osespec = rd65.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width13")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width13)
                
                #Tecnologia da Informa√ß√£o
                with st.expander("Tecnologia da Informa√ß√£o"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd79 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS          ",min_value=1,max_value=rd79,value=rd79,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd79)
                            numros5 = numros4-1
                            osespec = rd78.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width15")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width15)       
            #FINALIZADAS   
            with tab9:
                st.header('‚úÖ O.S Finalizadas', divider='blue')
                jam,jam1 = st.columns([0.2,1])
                with jam:
                    with st.expander("Filtros"):
                        genre = st.radio("Selecione ",["EL√âTRICA", "Por Data"],index=0)

                with st.expander(f"Minhas O.S  ({whrlinhas4})"):
                    diferent1,diferent2 = st.columns([0.2,0.00000000000001])
                    if genre == 'Por Data':
                        with diferent1:
                            cls = st.date_input('Escolha √° data')
                            status = str(cls)
                            consulta3 = f"SELECT * FROM ELETRICA WHERE FINALIZADA = 'Sim'"
                            whrlinhas90 = pd.read_sql_query(consulta3, conn)
                            whrlinhas91 = whrlinhas90.shape[0]
                        
                        if whrlinhas4 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=whrlinhas4,value=whrlinhas4,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas4)
                            numros3 = numros2-1
                            osespec = whrlinhas3.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width17")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width17)
                        with diferent2:
                            st.button('‚Üª')
                    
                    else:
                        if whrlinhas4 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input("Selecione o numero da            OS",min_value=1,max_value=whrlinhas4,value=whrlinhas4,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas4)
                            numros3 = numros2-1
                            osespec = whrlinhas3.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width19")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width19)



                with st.expander("PCM" f' ({pcm_id1})'):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if pcm_id1 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input(" Selecione  o numero da    OS",min_value=1,max_value=pcm_id1,value=pcm_id1,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=pcm_id1)
                            numros5 = numros4-1
                            osespec = pcm1.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width30")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width30)

                
                #Ferramentaria
                st.markdown('------')
                with st.expander("Ferramentaria"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd32 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione  o  numero  da  OS ",min_value=1,max_value=rd32,value=rd32,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd32)
                            numros5 = numros4-1
                            osespec = rd31.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width21")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width21)
                
                with st.expander("Produ√ß√£o"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd38 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS  ",min_value=1,max_value=rd38,value=rd38,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd38)
                            numros5 = numros4-1
                            osespec = rd37.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width23")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width23)

                with st.expander("Administrativo"):
                    if genre == 'EL√âTRICA':
                        if rd46 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS    ",min_value=1,max_value=rd46,value=rd46,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd46)
                            numros5 = numros4-1
                            osespec = rd45.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width24")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width24)

                with st.expander("Comercial"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd54 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS     ",min_value=1,max_value=rd54,value=rd54,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd54)
                            numros5 = numros4-1
                            osespec = rd53.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width25")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width25)
                    
                with st.expander("Expedi√ß√£o"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd62 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS        ",min_value=1,max_value=rd62,value=rd62,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd62)
                            numros5 = numros4-1
                            osespec = rd61.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width26")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width26)
                
                with st.expander("Serralharia"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd70 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS         ",min_value=1,max_value=rd70,value=rd70,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd70)
                            numros5 = numros4-1
                            osespec = rd69.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width27")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width27)
                
                with st.expander("Tecnologia da Informa√ß√£o"):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if rd75 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS            ",min_value=1,max_value=rd75,value=rd75,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd75)
                            numros5 = numros4-1
                            osespec = rd74.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width28")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width28)
            #CHECKLIST
            with tab10:
                col,col1,col2 = st.columns([0.5,1,0.5])
                with col:
                    with st.expander("",expanded=1):
                        st_ = st.container(border=True)
                        st.header(':blue[Localidade üö©] ',divider='blue')
                        quadro =st.radio(
                        "Selecione",
                        ['Quadro A01-A04 (PRENSA P8)','Quadro DA1-DA6 (PULLER E ESTICADEIRA)','Quadro AA1-AA3 (FORNO DE TARUGO)','Quadro EA1-EA4 (SERRA E INCESTADOR)','Quadro FA1-FA3 (FORNO DE ENVELHECIMENTO)'],
                        index=0,
                        ) 
                        
                    with st.expander("",expanded=1):
                        st_3 = st.container(border=True)
                        st.header(':blue[Situa√ß√£o üîé] ',divider='blue')
                        estado =st.radio(
                        "Selecione",
                        ['Equipamento em bom estado e em funcionamento!','Substitui√ß√£o de componente necessaria!','Equipamento danificado mas em funcionamento!'],
                        index=0,
                        )
                    
                    with st.expander("",expanded=1):
                        if estado == 'Substitui√ß√£o de componente necessaria!':
                            mat = pd.read_sql_query("SELECT * FROM Materiais", conn12)
                            mat_shape = mat.shape[0]
                            
                            def example_one():
                                filtered_df = dataframe_explorer(mat, case=False)
                                st.dataframe(filtered_df, use_container_width=True)
                            example_one()               
               
                with col2:
                    with st.expander("",expanded=1):
                        st_1 = st.container(border=True)
                        st.header(':blue[Equipamento ‚öô]',divider='blue')
                        equipamento = st.radio(
                        "Selecione",
                        ['Motores','Sensores','Contatores','Bot√µes','Reler√©s','Disjuntores','Controladores','Fontes','Transformadores','Inversores de frequ√™ncia','Porta fusiveis','Cilindros hidraulicos','Cilindros pneumaticos','Valvulas hidraulicas','Valvulas pneumaticas'],
                        index=0,
                        )
                    with st.expander("",expanded=1):
                        mat = pd.read_sql_query(f"SELECT * FROM checkList WHERE Equipamento = '{equipamento}' AND Local = '{quadro}'", conn)
                        mat_shape = mat.shape[0]
                        def example_one():
                            filtered_df = dataframe_explorer(mat, case=False)
                            st.dataframe(filtered_df, use_container_width=True)
                        example_one()
                    
                    if 'strs' == 'strs':
                        if equipamento == 'Motores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Limpeza:'
                            tltle_3 = 'Inspe√ß√£o das Condi√ß√µes Ambientais:'
                            tltle_4 = 'Lubrifica√ß√£o:'
                            tltle_5 = 'Teste de Isolamento:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_8 = 'Teste de Funcionamento:'
                            tltle_9 = 'Calibra√ß√£o (se aplic√°vel):'
                
                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de danos externos, como rachaduras, amassados ou corros√£o no inv√≥lucro do :blue[motor] Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Limpar qualquer sujeira, poeira ou detritos acumulados no :blue[motor] que possam interferir em seu funcionamento.Utilizar produtos de limpeza adequados que n√£o danifiquem o :blue[motor]'
                            errorfull_3 = '¬∞ Verificar se o :blue[motor] est√° instalado em um ambiente adequado em termos de temperatura, umidade e exposi√ß√£o a elementos corrosivos.'
                            errorfull_4 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_5 = '¬∞ Realizar testes de resist√™ncia de isolamento para garantir que n√£o haja curtos-circuitos ou falhas nos enrolamentos do :blue[motor].'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar a tens√£o e a corrente de opera√ß√£o do :blue[motor] para garantir que estejam dentro dos limites especificados pelo fabricante.'
                            errorfull_8 = '¬∞ Ligar brevemente o :blue[motor] para garantir que ele inicie suavemente e funcione sem ru√≠dos ou vibra√ß√µes anormais.Verificar se todos os sistemas de prote√ß√£o (como :blue[disjuntor]es e rel√©s t√©rmicos) est√£o funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se os dispositivos de controle e medi√ß√£o associados ao equipamento est√£o devidamente calibrados e funcionando corretamente.'
                        elif equipamento == 'Sensores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Limpeza:'
                            tltle_3 = 'Inspe√ß√£o das Condi√ß√µes Ambientais:'
                            tltle_4 = 'Verifica√ß√£o da Precis√£o e Sensibilidade:'
                            tltle_5 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_8 = 'Teste de Funcionamento:'
                            tltle_9 = 'Calibra√ß√£o (se aplic√°vel):'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de danos externos, como rachaduras, amassados ou corros√£o no inv√≥lucro do :blue[Sensor] Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Limpar qualquer sujeira, poeira ou detritos acumulados no :blue[Sensor] que possam interferir em seu funcionamento.Utilizar produtos de limpeza adequados que n√£o danifiquem o :blue[Sensor]'
                            errorfull_3 = '¬∞ Verificar se o :blue[Sensor] est√° instalado em um ambiente adequado em termos de temperatura, umidade e exposi√ß√£o a elementos corrosivos.'
                            errorfull_4 = '¬∞ Testar a precis√£o e sensibilidade do :blue[Sensor] em detectar varia√ß√µes ou mudan√ßas nas condi√ß√µes medidas.Comparar as leituras do :blue[Sensor] com padr√µes conhecidos ou outras :blue[fontes confi√°veis de] dados, quando dispon√≠veis.'
                            errorfull_5 = '¬∞ Testar a conex√£o f√≠sica do :blue[Sensor] com o sistema de monitoramento ou controle.Verificar se a comunica√ß√£o entre o :blue[Sensor] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se o :blue[Sensor] est√° recebendo a alimenta√ß√£o adequada de acordo com as especifica√ß√µes do fabricante.Testar a integridade do circuito de alimenta√ß√£o e identificar e corrigir quaisquer problemas de fornecimento de energia.'
                            errorfull_8 = '¬∞ Realizar testes funcionais para verificar se o :blue[Sensor] est√° respondendo corretamente aos est√≠mulos ou condi√ß√µes que ele √© projetado para detectar.Verificar se os sinais de sa√≠da do :blue[Sensor] est√£o dentro dos limites esperados e se correspondem √†s condi√ß√µes reais.'
                            errorfull_9 = '¬∞ Verificar se o :blue[Sensor] est√° calibrado corretamente de acordo com as especifica√ß√µes do fabricante.Realizar calibra√ß√µes peri√≥dicas conforme recomendado pelo fabricante ou conforme necess√°rio com base nos resultados das medi√ß√µes.'
                        elif equipamento == 'Contatores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Verifica√ß√£o dos Contatos'
                            tltle_3 = 'Verifica√ß√£o dos Mecanismos de Acionamento'
                            tltle_4 = 'Verifica√ß√£o das Bobinas:'
                            tltle_5 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Contator].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'

                            errorfull_2 = '¬∞ Inspecionar os contatos do :blue[Contator] quanto a sinais de desgaste, queimaduras, corros√£o ou pontos de solda.Limpar os contatos, se necess√°rio, para remover quaisquer dep√≥sitos ou acumula√ß√µes que possam interferir no funcionamento.'
                            errorfull_3 = '¬∞ Testar o mecanismo de acionamento do :blue[Contator] para garantir que esteja operando suavemente e sem obstru√ß√µes.Verificar se n√£o h√° pontos de travamento ou desalinhamento no mecanismo.'
                            errorfull_4 = '¬∞ Verificar a integridade e a resist√™ncia das bobinas do :blue[Contator].Testar a opera√ß√£o das bobinas para garantir que estejam funcionando corretamente e respondendo aos comandos de acionamento.'
                            errorfull_5 = '¬∞ Verificar se a tens√£o e a corrente de opera√ß√£o do :blue[Contator] est√£o dentro dos limites especificados pelo fabricante.Testar o :blue[Contator] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Contator] e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Contator] com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Contator] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'                          
                        elif equipamento == 'Bot√µes':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_3 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_4 = 'Verifica√ß√£o da Ilumina√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o da Veda√ß√£o:'
                            tltle_6 = 'Verifica√ß√£o da Durabilidade:'
                            tltle_7 = 'Ajuste da Sensibilidade:'
                            tltle_8 = 'Verifica√ß√£o da Fixa√ß√£o:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no bot√£o. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no bot√£o, evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar o funcionamento do bot√£o, garantindo que pression√°-lo acione o comando desejado de forma consistente.'
                            errorfull_3 = '¬∞ Verificar todas as conex√µes do bot√£o quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_4 = '¬∞ Verificar a ilumina√ß√£o do bot√£o, se aplic√°vel, garantindo que esteja funcionando corretamente.'
                            errorfull_5 = '¬∞ Verificar a veda√ß√£o do bot√£o, garantindo que esteja intacta para proteger contra poeira e umidade.'
                            errorfull_6 = '¬∞ Verificar a durabilidade do bot√£o, avaliando sua resist√™ncia ao uso repetido ao longo do tempo.'
                            errorfull_7 = '¬∞ Ajustar a sensibilidade do bot√£o, se aplic√°vel, para garantir que o acionamento ocorra com a press√£o adequada.'
                            errorfull_8 = '¬∞ Verificar a fixa√ß√£o do bot√£o, garantindo que esteja firmemente instalado e sem folgas.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral do bot√£o, garantindo que ele opere corretamente em todas as condi√ß√µes de uso.'
                        elif equipamento == 'Reler√©s':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Verifica√ß√£o dos Contatos'
                            tltle_3 = 'Verifica√ß√£o dos Mecanismos de Acionamento'
                            tltle_4 = 'Verifica√ß√£o das Bobinas:'
                            tltle_5 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Rel√©].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Inspecionar os contatos do :blue[Rel√©] quanto a sinais de desgaste, queimaduras, corros√£o ou pontos de solda.Limpar os contatos, se necess√°rio, para remover quaisquer dep√≥sitos ou acumula√ß√µes que possam interferir no funcionamento.'
                            errorfull_3 = '¬∞ Testar o mecanismo de acionamento do :blue[Rel√©] para garantir que esteja operando suavemente e sem obstru√ß√µes.Verificar se n√£o h√° pontos de travamento ou desalinhamento no mecanismo.'
                            errorfull_4 = '¬∞ Verificar a integridade e a resist√™ncia das bobinas do :blue[Rel√©].Testar a opera√ß√£o das bobinas para garantir que estejam funcionando corretamente e respondendo aos comandos de acionamento.'
                            errorfull_5 = '¬∞ Verificar se a tens√£o e a corrente de opera√ß√£o do :blue[Rel√©] est√£o dentro dos limites especificados pelo fabricante.Testar o :blue[Rel√©] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Rel√©] e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Rel√©] com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Rel√©] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                        elif equipamento == 'Disjuntores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o Nominal:'
                            tltle_4 = 'Teste de Funcionamento:'
                            tltle_5 = 'Verifica√ß√£o do Disparador:'
                            tltle_6 = 'Verifica√ß√£o do Mecanismo de Atua√ß√£o:'
                            tltle_7 = 'Teste de Prote√ß√£o contra Sobrecarga:'
                            tltle_8 = 'Teste de Prote√ß√£o contra Curto-Circuito:'
                            tltle_9 = 'Teste de Prote√ß√£o contra Falta √† Terra:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[disjuntor]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[disjuntor], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[disjuntor] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar se a tens√£o nominal do :blue[disjuntor] est√° de acordo com as especifica√ß√µes do equipamento. Substituir o :blue[disjuntor] se a tens√£o estiver fora dos limites especificados.'
                            errorfull_4 = '¬∞ Realizar um teste de funcionamento completo no :blue[disjuntor], incluindo abertura e fechamento sob carga. Verificar se o :blue[disjuntor] opera corretamente em todas as condi√ß√µes.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do disparador do :blue[disjuntor], garantindo que ele atue adequadamente em caso de sobrecarga ou curto-circuito.'
                            errorfull_6 = '¬∞ Verificar o mecanismo de atua√ß√£o do :blue[disjuntor], assegurando que ele opere suavemente e sem travamentos.'
                            errorfull_7 = '¬∞ Realizar um teste de prote√ß√£o contra sobrecarga, aplicando uma corrente ligeiramente acima da corrente nominal para verificar se o :blue[disjuntor] interrompe a corrente conforme esperado.'
                            errorfull_8 = '¬∞ Realizar um teste de prote√ß√£o contra curto-circuito, aplicando uma corrente muito alta para verificar se o :blue[disjuntor] interrompe a corrente rapidamente e de forma segura.'
                            errorfull_9 = '¬∞ Realizar um teste de prote√ß√£o contra falta √† terra, simulando uma falta √† terra para verificar se o :blue[disjuntor] atua corretamente e interrompe a corrente.'
                        elif equipamento == 'Controladores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o dos Cart√µes de E/S:'
                            tltle_4 = 'Verifica√ß√£o da Alimenta√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o dos Programas:'
                            tltle_6 = 'Backup dos Programas:'
                            tltle_7 = 'Teste de Comunica√ß√£o:'
                            tltle_8 = 'Teste de Entradas e Sa√≠das:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do o {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do o {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no controlador l√≥gico program√°vel (:blue[CLP]). Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[CLP], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[CLP] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar os cart√µes de entrada e sa√≠da (E/S) do :blue[CLP], garantindo que estejam corretamente instalados e sem sinais de danos.'
                            errorfull_4 = '¬∞ Verificar a alimenta√ß√£o do :blue[CLP], garantindo que a tens√£o de entrada esteja dentro dos limites especificados e que n√£o haja flutua√ß√µes de tens√£o.'
                            errorfull_5 = '¬∞ Verificar os programas armazenados no :blue[CLP], assegurando que estejam corretamente carregados e sem erros de programa√ß√£o.'
                            errorfull_6 = '¬∞ Realizar um backup dos programas armazenados no :blue[CLP], garantindo que haja uma c√≥pia de seguran√ßa em caso de perda de dados.'
                            errorfull_7 = '¬∞ Realizar um teste de comunica√ß√£o com o :blue[CLP], garantindo que seja poss√≠vel estabelecer comunica√ß√£o e fazer upload/download de programas.'
                            errorfull_8 = '¬∞ Realizar um teste de entradas e sa√≠das do :blue[CLP], garantindo que todas as entradas e sa√≠das estejam operando corretamente conforme especificado no programa.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral do :blue[CLP], incluindo a execu√ß√£o do programa e verifica√ß√£o do comportamento do sistema controlado.'
                        elif equipamento == 'Fontes':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o de Sa√≠da:'
                            tltle_4 = 'Verifica√ß√£o da Corrente de Sa√≠da:'
                            tltle_5 = 'Verifica√ß√£o da Estabilidade:'
                            tltle_6 = 'Verifica√ß√£o da Prote√ß√£o contra Surtos:'
                            tltle_7 = 'Teste de Prote√ß√£o:'
                            tltle_8 = 'Teste de Sobrecarga:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do a {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do o {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos na :blue[fonte de alimenta√ß√£o]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular na :blue[fonte de alimenta√ß√£o], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes da :blue[fonte de alimenta√ß√£o] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar a tens√£o de sa√≠da da :blue[fonte de alimenta√ß√£o], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_4 = '¬∞ Verificar a corrente de sa√≠da da :blue[fonte de alimenta√ß√£o], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_5 = '¬∞ Verificar a estabilidade da :blue[fonte de alimenta√ß√£o], garantindo que n√£o haja flutua√ß√µes significativas na tens√£o ou corrente de sa√≠da.'
                            errorfull_6 = '¬∞ Verificar a prote√ß√£o contra surtos da :blue[fonte de alimenta√ß√£o], garantindo que esteja funcionando corretamente para proteger o equipamento conectado contra picos de tens√£o.'
                            errorfull_7 = '¬∞ Realizar um teste de prote√ß√£o da :blue[fonte de alimenta√ß√£o], garantindo que ela atue corretamente em caso de sobretens√£o, subtens√£o ou curto-circuito.'
                            errorfull_8 = '¬∞ Realizar um teste de sobrecarga na :blue[fonte de alimenta√ß√£o], aplicando uma carga maior que a nominal para verificar se ela continua operando dentro dos limites especificados.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral da :blue[fonte de alimenta√ß√£o], garantindo que ela opere corretamente em todas as condi√ß√µes de carga e temperatura.'
                        elif equipamento == 'Transformadores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o Prim√°ria:'
                            tltle_4 = 'Verifica√ß√£o da Tens√£o Secund√°ria:'
                            tltle_5 = 'Verifica√ß√£o dos Enrolamentos:'
                            tltle_6 = 'Teste de Isola√ß√£o:'
                            tltle_7 = 'Teste de Resist√™ncia de Isolamento:'
                            tltle_8 = 'Verifica√ß√£o do Resfriamento:'
                            tltle_9 = 'Teste de Funcionamento:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do o {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do a {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[transformador]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[transformador], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[transformador] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar a tens√£o prim√°ria do :blue[transformador], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_4 = '¬∞ Verificar a tens√£o secund√°ria do :blue[transformador], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_5 = '¬∞ Verificar os enrolamentos do :blue[transformador] quanto a sinais de danos, superaquecimento ou desgaste excessivo.'
                            errorfull_6 = '¬∞ Realizar um teste de isola√ß√£o no :blue[transformador] para verificar se h√° algum curto-circuito ou falha no isolamento.'
                            errorfull_7 = '¬∞ Realizar um teste de resist√™ncia de isolamento para verificar a resist√™ncia entre os enrolamentos e o chassi do :blue[transformador].'
                            errorfull_8 = '¬∞ Verificar o sistema de resfriamento do :blue[transformador], garantindo que os radiadores ou ventiladores estejam funcionando corretamente.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento completo do :blue[transformador], garantindo que ele opere corretamente em todas as condi√ß√µes de carga e temperatura.'
                        elif equipamento == 'Inversores de frequ√™ncia':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o dos Par√¢metros:'
                            tltle_3 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_4 = 'Verifica√ß√£o da Ventila√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o dos Enrolamentos do :blue[Motor]:'
                            tltle_6 = 'Verifica√ß√£o da Tens√£o e Corrente de Sa√≠da:'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Inversor].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Remova qualquer sujeira, poeira ou detritos que possam acumular no :blue[Inversor] e interferir em seu funcionamento.Use ar comprimido ou um pano limpo e seco para limpar o :blue[Inversor] , evitando o uso de produtos qu√≠micos que possam danificar os componentes.'
                            errorfull_2 = '¬∞ Verifique os par√¢metros de opera√ß√£o do :blue[Inversor]  para garantir que estejam configurados conforme as especifica√ß√µes do fabricante e os requisitos de aplica√ß√£o.Fa√ßa ajustes nos par√¢metros, se necess√°rio, para otimizar o desempenho do inversor ou corrigir problemas de opera√ß√£o.'
                            errorfull_3 = '¬∞ Inspecione os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou problemas de conex√£o.Aperte quaisquer terminais soltos ou conex√µes frouxas para garantir uma conex√£o el√©trica segura.'
                            errorfull_4 = '¬∞ Verifique se os ventiladores ou sistemas de resfriamento do :blue[Inversor]  est√£o funcionando corretamente.Limpe os filtros de ar ou ventiladores obstru√≠dos para garantir uma boa circula√ß√£o de ar e evitar o superaquecimento.'
                            errorfull_5 = '¬∞ Verifique os enrolamentos do :blue[motor] conectado ao :blue[Inversor]  quanto a sinais de superaquecimento, danos ou desgaste excessivo.Me√ßa a temperatura dos enrolamentos durante a opera√ß√£o para identificar problemas de sobreaquecimento.'
                            errorfull_6 = '¬∞ Me√ßa a tens√£o e a corrente de sa√≠da do :blue[Inversor] para garantir que estejam dentro dos limites especificados pelo fabricante.Teste o :blue[Inversor]  em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Inversor]  e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Inversor]  com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Inversor]  e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                        elif equipamento == 'Porta fusiveis':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o da Continuidade:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o e Corrente de Sa√≠da:'
                            tltle_4 = 'Verifica√ß√£o dos Terminais:'
                            tltle_5 = 'Aperto dos Terminais e Conex√µes:'
                            tltle_6 = 'Teste de Funcionamento:'
                            tltle_7 = 'Verifica√ß√£o da Compatibilidade dos Fus√≠veis:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o √† Terra:'
                            tltle_9 = 'Verifica√ß√£o da Prote√ß√£o contra Surtos:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Porta fusiveis]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Remova qualquer sujeira, poeira ou detritos que possam acumular no :blue[Porta fusiveis] e interferir em seu funcionamento. Use ar comprimido ou um pano limpo e seco para limpar o :blue[Porta fusiveis], evitando o uso de produtos qu√≠micos que possam danificar os componentes.'
                            errorfull_2 = '¬∞ Verifique a continuidade dos contatos do :blue[Porta fusiveis] para garantir que estejam em boas condi√ß√µes de funcionamento. Substitua os fus√≠veis quebrados ou danificados conforme necess√°rio.'
                            errorfull_3 = '¬∞ Me√ßa a tens√£o e a corrente de sa√≠da do :blue[Porta fusiveis] para garantir que estejam dentro dos limites especificados pelo fabricante.Teste o :blue[Porta fusiveis] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_4 = '¬∞ Verifique os terminais do :blue[Porta fusiveis] quanto a sinais de desgaste, corros√£o ou folga. Aperte quaisquer terminais soltos para garantir uma conex√£o el√©trica segura.'
                            errorfull_5 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                            errorfull_6 = '¬∞ Realizar testes de funcionamento no :blue[Porta fusiveis] para garantir sua opera√ß√£o adequada.'
                            errorfull_7 = '¬∞ Verifique se os fus√≠veis utilizados s√£o compat√≠veis com as especifica√ß√µes do equipamento protegido.'
                            errorfull_8 = '¬∞ Verificar se a conex√£o √† terra do :blue[Porta fusiveis] est√° correta e em boas condi√ß√µes.'
                            errorfull_9 = '¬∞ Verificar se o :blue[Porta fusiveis] possui prote√ß√£o contra surtos adequada para proteger os equipamentos conectados contra picos de tens√£o.'
                        elif equipamento == 'Cilindros hidraulicos':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Cilindro hidraulico]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Cilindro hidraulico], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Cilindro hidraulico] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Cilindro hidraulico] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Cilindro hidraulico] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Cilindros pneumaticos':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Cilindro pneumatico]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Cilindro pneumatico], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Cilindro pneumatico] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Cilindro pneumatico] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Cilindro pneumatico] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Valvulas hidraulicas':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Valvulas hidraulicas]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Valvulas hidraulicas], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Valvulas hidraulicas] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Valvulas hidraulicas] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Valvulas hidraulicas] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Valvulas pneumaticas':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Valvulas pneumaticas]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Valvulas pneumaticas], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Valvulas pneumaticas] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Valvulas pneumaticas] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Valvulas pneumaticas] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                    
                with col1:
                    with st.expander("",expanded=1):
                        st.header(':blue[CheckList üìã]',divider='blue')
                        check_9 =st.text_input('T.A.G de refer√™ncia do equipamento:')
                        componente = (f'{check_9} pertence a {equipamento}')
                        check = st.checkbox(tltle)
                        if check:
                            st.success(sucessfull)
                        else:
                            st.error(errorfull)
                    
                        check_1 =st.checkbox(tltle_1)
                        if check_1:
                            st.success(sucessfull_1)
                        else:
                            st.error(errorfull_1)
                        
                        check_1_2 =st.checkbox(tltle_2)
                        if check_1_2:
                            st.success(sucessfull_2)
                        else:
                            st.error(errorfull_2)
                        
                        check_2 =st.checkbox(tltle_3)
                        if check_2:
                            st.success(sucessfull_3)
                            if equipamento == 'Disjuntores' or equipamento == 'Fontes' or equipamento == 'Transformadores':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a tens√£o (V): ',value=0.0,step=0.1)
                            if equipamento == 'Porta fusiveis':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                            if  equipamento == 'Cilindros hidraulicos' or equipamento == 'Cilindros pneumaticos'or equipamento =='Valvulas hidraulicas'or equipamento =='Valvulas pneumaticas':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a press√£o (BAR/PSI):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_3)
                        check_3 =st.checkbox(tltle_4)
                        if check_3:
                            st.success(sucessfull_4)
                            if equipamento == 'Controladores' or equipamento == 'Transformadores':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_4)
                        check_4 =st.checkbox(tltle_5)
                        if check_4:
                            st.success(sucessfull_5)
                            if equipamento == 'Contatores' or equipamento == 'Reler√©s':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_5)
                            
                        if not equipamento == 'Contatores' and not equipamento == 'Reler√©s'and not equipamento == 'Inversores de frequ√™ncia' and not equipamento == 'Porta fusiveis' and not equipamento == 'Sensores':
                            check_5 =st.checkbox(tltle_6)
                            if check_5:
                                st.success(sucessfull_6)
                            else:
                                st.error(errorfull_6 )
                        
                        check_6 =st.checkbox(tltle_7)
                        if check_6:
                            st.success(sucessfull_7)
                            if equipamento == 'Motores' or equipamento == 'Sensores':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_7)
                        
                        check_7 =st.checkbox(tltle_8)
                        if check_7:
                            st.success(sucessfull_8)
                        else:
                            st.error(errorfull_8)

                        check_8 =st.checkbox('Calibra√ß√£o (se aplic√°vel):')
                        if check_8:
                            st.success(sucessfull_9)
                        else:
                            st.error(errorfull_9)
                        check_10 =st.text_area('Registro de Manuten√ß√£o:')
                        
                        if not equipamento == 'Contatores' and not equipamento == 'Reler√©s'and not equipamento == 'Inversores de frequ√™ncia' and not equipamento == 'Porta fusiveis' and not equipamento == 'Sensores':
                            checkslists = [check_1,check_1_2,check_2,check_3,check_4,check_5,check_6,check_7,check_8,check_9,check_10]
                            tst = all(checkslists)
                            
                        else:
                            checkslists = [check_1,check_1_2,check_2,check_3,check_4,check_6,check_7,check_8,check_9,check_10]
                            tst = all(checkslists)
                        
                        if tst:
                            envio = st.button('(‚åê‚ñ†_‚ñ†)')
                            if envio:
                                cursor.execute("INSERT INTO checklist (Tag,Local,Equipamento,Situa√ß√£o,Check_1,Check_2,Check_3,Check_4,Check_5,Check_6,Check_7,Check_8,Check_9,Relatorio,Hora,Data,M√™s) VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)", (check_9,quadro,equipamento,estado,(f'{tltle} Concluido'),(f'{tltle_1} Concluido'),(f'{tltle_2} Concluido'),(f'{tltle_3} Concluido'),(f'{tltle_4} Concluido'),(f'{tltle_5} Concluido'),(f'{tltle_6} Concluido'),(f'{tltle_7} Concluido'),(f'{tltle_8} Concluido'),(f'{tltle_9} Concluido'),timenow,datenow,monthnow))
                                conn.commit()                 
            #GERAL                          
            with tab11:
                st.header (aviso_list,divider='blue')
                omaga = st.multiselect('Selecione:',acao_list,max_selections=1)
                if not omaga == []:
                    corretivas = pd.read_sql_query(f"SELECT * FROM ELETRICA WHERE A√á√ÉO = '{omaga[0]}'", conn)
                    corretivas_shape = corretivas.shape[0]
                if omaga == []:
                    st.success('Escolha um tipo de a√ß√£o')
                else:
                    if corretivas_shape == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        corretivas = pd.read_sql_query(f"SELECT * FROM MECANICA WHERE A√á√ÉO = '{omaga[0]}'", conn)
                        corretivas_shape = corretivas.shape[0]
                        st.metric(label="O.S Existentes", value=corretivas_shape)
                        numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=corretivas_shape,value=corretivas_shape,placeholder="Selecione!")
                        numros3 = numros2-1
                        serie_pdf = corretivas.loc[numros3]
                        def load_data():
                            return pd.DataFrame(serie_pdf)
                        st.checkbox("Estender", value=True, key="use_container_width17")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width17)
                        dt = corretivas.loc[numros3]
                        dt = dt.tolist()
        
                        with open(f"./Data/geral_El√©trica.pdf", 'rb') as file:
                            pdf_reader = PyPDF2.PdfReader(file)
                            bttn = st.download_button(
                            label="Exportar O.S üñ®",
                            key= "download_button",
                            data= file,
                            file_name=f"O.S {dt[0]}.pdf",
                            mime='application/octet-stream'
                        )
                        usuario = 'El√©trica'
                        cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                        if cursor1.fetchall():
                            cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                            imagens = cursor1.fetchall()
                            imagens
                            oe = imagens[0][1]
                            imagem = Image.open(BytesIO(oe))

                        localx = corretivas.loc[numros3]
                        pmg = localx.tolist()
                        Solicitante = solicitante_titulo
                        Data = 'Data:'
                        Hora = 'Horario:'
                        Setor = 'Setor:'
                        Os = 'O.S:'
                        maqx = local_titulo
                        dados = [Solicitante,Data,Hora,Setor,Os,maqx,'']
                        img = Image.open('./Midia/ssmm.jpg')
                        img1 = Image.open('./Midia/sales.jpeg')

                        def hello(c,pmg):
                            o = 0
                            b = []
                            for s in str(pmg[1]):
                                if s.isalpha():
                                    o += 1
                                    tmh = 4 * o + 58 
                                    b.append(tmh)

                            ct = []
                            for s in str(pmg[2]):
                                if not pmg[2] =='Produ√ß√£o':
                                    if s.isalpha():
                                        o += 1
                                        tmh = 4 * o + 268
                                        ct.append(tmh)
                                    else:
                                        ''
                            idx = 0             
                            for james in dados:
                                idx = idx + 1
                                largura_da_linha = 0.1
                                width, height = 580, 50
                                raio = 10
                                if idx == 1:
                                #SOLICITANTE
                                    t1,t2 = 15,730
                                    t3,t4 = 58,730
                                    t5,t6 = 20,662
                                    t7,t8 = 380,662
                                    t9,t10 = 500,210
                                    t11,t12 = 90,642

                                    texto = f'{pmg[1]}'
                                    text = f'{pmg[5]}'
                                    textox = 'Grau de ocorr√™ncia :'
                                    textoxx = 'Especialidade :'
                                    textos = ''
                                    x1, y1 = b[9], 728
                                    x2, y2 = 58, 728
                                    widt, heigh = 200, 30
                                    r,r1 = 18,630
                                    r2,r3 = 380,630
                                    k1,k2,k3,k4 = 250,680,250,420
                                if idx == 2:
                                #DAT
                                    t1,t2 = 15,705
                                    t3,t4 = 38,705
                                    t5,t6 = 18,583
                                    t7,t8 = 380,583
                                    t9,t10 = 500,210
                                    t11,t12 = 90,563

                                    texto = f'{pmg[6]}'
                                    text = f'{pmg[8]}'
                                    textox = 'A√ß√£o :'
                                    textoxx = 'Data de finaliza√ß√£o :'
                                    textos = ''
                                    x1, y1 = 75, 703
                                    x2, y2 = 37, 703
                                    r,r1 = 18,550
                                    r2,r3 = 380,550
                                    k1,k2,k3,k4 = 350,680,350,420
                                if idx == 3:
                                    #HORA
                                    t1,t2 = 250,730
                                    t3,t4 = 283,730
                                    t5,t6 = 18,513
                                    t7,t8 = 380,513
                                    t9,t10 = 500,210
                                    t11,t12 = 90,493

                                    texto = f'{pmg[7]}'
                                    text = f'{pmg[9]}'
                                    textox = 'Finalizada? :'
                                    textoxx = 'Horario de finaliza√ß√£o :'
                                    textos = ''

                                    x1, y1 = 283, 728
                                    x2, y2 = 310, 728
                                    r,r1 = 18,480
                                    r2,r3 = 380,480
                                    k1,k2,k3,k4 = 500,10,580,10
                                if idx == 4:
                                #SETOR
                                    t1,t2 = 250,705
                                    t3,t4 = 275,705
                                    t5,t6 = 18,422
                                    t9,t10 = 510,15
                                    t11,t12 = 430,642

                                    texto = f'{pmg[2]}'
                                    text = f'{pmg[12]}'
                                    textox = 'Ocorr√™ncia :'
                                    textos = 'Bruno Kappaun'
        
                                    x1, y1 = 275, 703
                                    x2, y2 = ct[0], 703
                                    widt, heigh = 560, 60
                                    r,r1 = 18,360
                                if idx == 5:
                                    #OS
                                    t1,t2 = 430,730
                                    t3,t4 = 448,730
                                    t5,t6 = 25,345
                                    t11,t12 = 430,563

                                    texto = f'N¬∞ 00{pmg[0]}'
                                    text = f'{pmg[10]}'
                                    textox = 'Visualiza√ß√£o do problema:'
                                    x1, y1 = 448, 728
                                    x2, y2 = 475, 728
                                if idx == 6:
                                #maquina
                                    t1,t2 = 430,705
                                    t3,t4 = 455,705
                                    t5,t6 = 30,170
                                    t11,t12 = 430,493
                                    texto =f'{pmg[13]}'
                                    textox = 'Visualiza√ß√£o p√≥s problema:'
                                    text = f'{pmg[11]}'
                                    x1, y1 = 455, 703
                                    x2, y2 = 510, 703
                                if idx == 7:
                                    t11,t12 = 25,410
                                    text = f'{pmg[3]}'
                
                                pdfmetrics.registerFont(TTFont('font', './Fontes/ASENINE_.ttf'))
                                cor_do_texto = (0,0,0)
                                font_name = 'font' 

                                pdfmetrics.registerFont(TTFont('ASS', './Fontes/ASSINATURA.ttf'))
                                cor_do_texto = (0,0,0)
                                font_namex = 'ASS' 
            
                                textobject = c.beginText(t1, t2)
                                textobject.setFont(font_name , 13)
                                textobject.setTextOrigin(t1, t2)
                                textobject.textLine(f"{james}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobject)
                                c.setLineWidth(largura_da_linha)
                                c.line(x1,y1,x2,y2)
        
                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t3, t4)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t3, t4)
                                textobjectx.textLine(f"{texto}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t5, t6)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t5, t6)
                                textobjectx.textLine(f"{textox}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t7, t8)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t7, t8)
                                textobjectx.textLine(f"{textoxx}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t9, t10)
                                textobjectx.setFont(font_namex, 10)
                                textobjectx.setTextOrigin(t9, t10)
                                textobjectx.textLine(f"{textos}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t11, t12)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t11, t12)
                                textobjectx.textLine(f"{text}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                raio = 5
                                c.roundRect(r, r1, widt, heigh, raio, stroke=1, fill=0)

                                width, height = 200, 30
                                raio = 5
                                c.roundRect(r2, r3, width, height, raio, stroke=1, fill=0)
                                c.line(k1,k2,k3,k4)
                            width, height = 700, 50
                            raio = 10
                            r,r1 = 8,800
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)

                            width, height = 580, 680
                            raio = 10
                            r,r1 = 8,0
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)
    
                            x, y = 0,750
                            c.drawInlineImage(img, x,y, width=600,height=100)
                            x, y = 10,180
                            x1,y1 = 10, 20
                            if not corretivas.empty:
                                cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                if cursor1.fetchall():
                                    cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                    imagens = cursor1.fetchall()
                                    oe = imagens[0][1]
                                    oie = imagens[0][2]
                                    imagem = Image.open(BytesIO(oe))
                                    imagem2 = Image.open(BytesIO(oie))
                                    c.drawInlineImage(imagem2, x1,y1, width=400,height=145)
                                    c.drawInlineImage(imagem, x,y, width=400,height=145)   
                        
                        c = canvas.Canvas(f"./Data/geral_{usuario}.pdf")
                        hh = hello(c,pmg)
                        c.save()
            
#MEC√ÇNICA
allln = pd.read_sql_query("SELECT * FROM MECANICA", conn)
allln1 = allln.shape[0]
consulta4 = "SELECT * FROM MECANICA"
allinhas = pd.read_sql_query(consulta4, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta5 = "SELECT * FROM MECANICA WHERE FINALIZADA = 'N√£o'"
MECANICAdados = pd.read_sql_query(consulta5, conn)
MECANICAvalores = MECANICAdados.shape[0] 

#O.S FINALIZADAS
consulta6 = "SELECT * FROM MECANICA WHERE FINALIZADA = 'Sim'"
MECANICAdados1 = pd.read_sql_query(consulta6, conn)
MECANICAvalores1= MECANICAdados1.shape[0]

if fLIDERES == 'Equipe de MEC√ÇNICA':
    if fSETOR == 'Mec√¢nica':
        if senha == '1400':
            #cl1 = st.button("DELETAR TABELA")
            #if cl1:
                #cursor.execute("DROP TABLE MECANICA")
                #conn.commit()
            image = Image.open('./Midia/ssmm.jpg')
            col1,col2 = st.columns([5,5])
            with col1:
                st.title(tltle_list)
           
            tab6, tab7,tab8,tab9,tab10,tab11= st.tabs(tabs_list)
            with tab6:
                st.header(header_list,divider='blue')
                colibrim,neymar= st.columns([2,3])  
                with colibrim:
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if allln1 == 0:
                           numros = 0
                           numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln1,value=allln1,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM MECANICA"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]

                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, (solicitante_list),index=None,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, (solicitante_list),index=None,placeholder='Atualize!',help=help_solicitante)
                        
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, (setor_list),index=None,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                        
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl, (setor_list),index=None,placeholder='Atualize!',help=help_setor)
                        Rsetor = ''

                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, (ocorrencia_list),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,(ocorrencia_list),index=None, placeholder='Atualize!',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, (acao_list),index=None,placeholder='Selecione!',help=helpe_acao)
                        RUacao = ' '
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, (acao_list),index=None,placeholder='Atualize!',help=helpe_acao)
                        Racao = ' '

                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not atd1:
                            segmento = container.selectbox('Defina o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Selecione!',help=help_setor)
                        if atd1:
                            segmento = container.selectbox('Atualize o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Atualize!',help=help_setor)
                        if not segmento == None:
                            comb = (f'{Rsetor} {segmento} {Racao}')
                    else:
                        comb = (f'{Rsetor} {Racao}')
                        
                    
                    if not atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    if atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    
                    if not atd1: 
                        especialidades = container.selectbox(especialidades_titulo, (especialidade_list),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl, (especialidade_list),index=None,placeholder='Atualize!',help=help_especialidade)
                    
                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not segmento == None:
                            if comb == 'Produ√ß√£o Extrus√£o Corretiva' or comb == 'Produ√ß√£o Extrus√£o Preventiva' or comb == 'Produ√ß√£o Extrus√£o Preditiva':
                                Local = container.selectbox(local_titulo,(extrus√£o_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Extrus√£o Confec√ß√£o' or comb == 'Produ√ß√£o Extrus√£o Montagem':
                                Local = container.selectbox(local_titulo,(extrus√£o_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Estampo Corretiva' or comb == 'Produ√ß√£o Estampo Preventiva' or comb == 'Produ√ß√£o Estampo Preditiva':
                                Local = container.selectbox(local_titulo,(estampo_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Estampo Confec√ß√£o' or comb == 'Produ√ß√£o Estampo Montagem':
                                Local = container.selectbox(local_titulo,(estampo_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Embalagem Corretiva' or comb == 'Produ√ß√£o Embalagem Preventiva' or comb == 'Produ√ß√£o Embalagem Preditiva':
                                Local = container.selectbox(local_titulo,(embalagem),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Embalagem Confec√ß√£o' or comb == 'Produ√ß√£o Embalagem Montagem':
                                Local = container.selectbox(local_titulo,(embalagem_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Rosca e Furo Corretiva' or comb == 'Produ√ß√£o Rosca e Furo Preventiva' or comb == 'Produ√ß√£o Rosca e Furo Preditiva':
                                Local = container.selectbox(local_titulo,(rosca_e_furo),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Rosca e Furo Confec√ß√£o' or comb == 'Produ√ß√£o Rosca e Furo Montagem':
                                Local = container.selectbox(local_titulo,(rosca_e_furo_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Corte Corretiva' or comb == 'Produ√ß√£o Corte Preventiva' or comb == 'Produ√ß√£o Corte Preditiva':
                                Local = container.selectbox(local_titulo,(corte),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Corte Confec√ß√£o' or comb == 'Produ√ß√£o Corte Montagem':
                                Local = container.selectbox(local_titulo,(corte_√¢),index=None,placeholder= 'Selecione!',help=help_local) 
                        else:
                            Local = ''
                            
                
                    else:
                       
                        if comb == 'Tecnologia da Informa√ß√£o Corretiva' or comb == 'Tecnologia da Informa√ß√£o Preventiva' or comb == 'Tecnologia da Informa√ß√£o Preditiva':
                            Local = container.selectbox(local_titulo,(ti),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Tecnologia da Informa√ß√£o Confec√ß√£o' or comb == 'Tecnologia da Informa√ß√£o Montagem':
                            Local = container.selectbox(local_titulo,(ti_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        else:
                            Local = ' '
                           

                        if comb == 'Administrativo Corretiva' or comb == 'Administrativo Preventiva' or comb == 'Administrativo Preditiva':
                            Local = container.selectbox(local_titulo,(administrativo),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Administrativo Confec√ß√£o' or comb == 'Administrativo Montagem':
                            Local = container.selectbox(local_titulo,(administrativo_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        
                        if comb == 'Comercial Corretiva' or comb == 'Comercial Preventiva' or comb == 'Comercial Preditiva':
                            Local = container.selectbox(local_titulo,(comercial),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Comercial Confec√ß√£o' or comb == 'Comercial Montagem':
                            Local = container.selectbox(local_titulo,(comercial_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                        
                        if comb == 'Expedi√ß√£o Corretiva' or comb == 'Expedi√ß√£o Preventiva' or comb == 'Expedi√ß√£o Preditiva':
                            Local = container.selectbox(local_titulo,(expedi√ß√£o),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Expedi√ß√£o Confec√ß√£o' or comb == 'Expedi√ß√£o Montagem':
                            Local = container.selectbox(local_titulo,(expedi√ß√£o_√¢),index=None,placeholder= 'Selecione!',help=help_local)

                        if comb == 'Ferramentaria Corretiva' or comb == 'Ferramentaria Preventiva' or comb == 'Ferramentaria Preditiva':
                            Local = container.selectbox(local_titulo,(ferramentaria_list),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Ferramentaria Confec√ß√£o' or comb == 'Ferramentaria Montagem':
                            Local = container.selectbox(local_titulo,(ferramentaria_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)

                        if comb == 'Utilidades Corretiva' or comb == 'Utilidades Preventiva' or comb == 'Utilidades Preditiva':
                            Local = container.selectbox(local_titulo,(utilidades_list),index=None,placeholder= 'Selecione!',help=help_local)
                        elif comb == 'Utilidades Confec√ß√£o' or comb == 'Utilidades Montagem':
                            Local = container.selectbox(local_titulo,(utilidades_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)

                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        agree = container.checkbox('Selecione √° caixa para enviar a imagem em outro momento:')
                        if agree:
                            uploaded_files = bytes_imagem
                            bytes_data = bytes_imagem
                        else:
                             uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True)
                             for uploaded_file in uploaded_files:
                                 bytes_data = uploaded_file.read()

                with neymar:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln1)
                        if allln1 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec = allinhas.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=int(preenchimento[0]),value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM MECANICA WHERE OS = {numero_da_os};')
                                conn.commit()
                                cursor1.execute("UPDATE imagens SET imagem = ? WHERE id = ?",(bytes_data,numros))
                                conn1.commit()
                
                if fLIDERES == 'Equipe de MEC√ÇNICA':
                    if fSETOR == 'Mec√¢nica':
                        if senha == '1400':
                            if atd1: 
                                atl = st.button('Atualize  ‚Üª')
                                if atl:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.01)
                                    cursor.execute("UPDATE MECANICA SET SOLICITANTE = ?, SETOR = ?,OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ?,Local = ? WHERE OS = ?",(RUsolicitante, RUsetor, RUstatus,RUniveldaocorrencia,RUacao,Local,int(preenchimento[0])))
                                    conn.commit()
                                    
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files,parada]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[8] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_mecanica = ids_shape + 1
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_mecanica}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_mecanica,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO MECANICA OS,SOLICITANTE,SETOR,SEGMENTO,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,ESPECIALIDADE,LOCAL,M√äS,PARADA) VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)", (ids_shape_mecanica, Rsolicitante, Rsetor,segmento,Rstatus,Rniveldaocorrencia,datenow,str(timenow),Racao,'N√£o',None,None,especialidades,Local,monthnow,parada))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()

            with tab7:
                st.header('üîö Finalizar O.S',divider='blue')
                jefferson,lourdes=st.columns(2)
                with jefferson:
                    containerx = st.container(border=True)
                    setorescolhido = containerx.selectbox('Setor', ('PCM','Tecnologia da Informa√ß√£o','Comercial','Administrativo','Expedi√ß√£o','Produ√ß√£o','Ferramentaria','Serralharia','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_setor)
                    fnlz2 = containerx.number_input("Selecione o numero da O.S que deseja Finalizar",min_value=1,max_value=1000,value=1,placeholder="Selecione!",help=help_numero_os)
                    fnlz3 = fnlz2-1
                    finalizar = containerx.selectbox('O.S finalizada?', ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_finalizar_os)
                    uploaded_filess = containerx.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem_fnlzd)
                    for uploaded_filee in uploaded_filess:
                        bytess_data = uploaded_filee.read()

                    #datainput = containerx.date_input("Data", value=None)
                    #containerx.write(datainput)
                    #timeinput = containerx.time_input('HORA', value=None)
                    #containerx.write(timeinput)

                if fLIDERES == 'Equipe de MEC√ÇNICA':
                    if fSETOR == 'Mec√¢nica':
                        if uploaded_filess:
                            if setorescolhido == 'Ferramentaria':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Ferramentaria SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit() 

                            if setorescolhido == 'Produ√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE PRODUCAO SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()  
                            
                            if setorescolhido == 'Administrativo':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Administrativo SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit() 
                                    
                            
                            if setorescolhido == 'Comercial':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Comercial SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()   

                            if setorescolhido == 'Expedi√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE EXPEDICAO SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()  

                            if setorescolhido == 'Serralharia':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE Serralharia SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()  

                            if setorescolhido == 'Tecnologia da Informa√ß√£o':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE TI SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()  

                            if setorescolhido == 'PCM':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor14.execute("UPDATE PCM SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn14.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()   

                            if setorescolhido == 'Mec√¢nica':    
                                fnl=st.button("Finalizar O.S ‚úî")
                                if fnl:
                                    st.toast('Finalizando O.S!')
                                    time.sleep(0.5)
                                    st.toast(f'O.S [{fnlz2}] Finalizada!')
                                    cursor.execute("UPDATE MECANICA SET FINALIZADA = ?, DATAF = ?, HORAF = ? WHERE OS = ?",(finalizar,datenow,str(timenow),fnlz2))
                                    conn.commit()
                                    cursor1.execute("UPDATE imagens SET imagem_finalizada = ? WHERE id = ?",(bytess_data,fnlz2))
                                    conn1.commit()    

            with tab8:
                st.header(abertas_list, divider='blue')
                jam,jam1 = st.columns([0.2,1])
                with jam:
                    with st.expander("Filtros"):
                        genre = st.radio(
                          "Selecione!",
                        ["MEC√ÇNICA","Por Data"],
                        index=0,
                        )
                with st.expander(f"Minhas OS  ({MECANICAvalores})"):
                    diferent1,diferent2 = st.columns([0.2,0.00000000000001])
                    if genre == 'Por Data':
                        with diferent1:
                            cls = st.date_input('Escolha √° data')
                            status = str(cls)
                            consulta3 = f"SELECT * FROM MECANICA WHERE FINALIZADA = 'N√£o' AND DATA = '{status}'"
                            whrlinhas90 = pd.read_sql_query(consulta3, conn)
                            whrlinhas91 = whrlinhas90.shape[0]
                        if whrlinhas91 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=whrlinhas91,value=whrlinhas91,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= MECANICAvalores)
                            numros3 = numros2-1
                            osespec = whrlinhas90.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width2")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width2)
                        with diferent2:
                            st.button('‚Üª')
                    else:
                        if MECANICAvalores == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=MECANICAvalores,value=MECANICAvalores,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= MECANICAvalores)
                            numros3 = numros2-1
                            osespec = MECANICAdados.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width2")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width2)

                
                with st.expander("PCM" f' ({pcm_id2})'):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if pcm_id2 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da k OS",min_value=1,max_value=pcm_id2,value=pcm_id2,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=pcm_id2)
                            numros5 = numros4-1
                            osespec = pcm2.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width16")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width16)

                #Ferramentaria   
                st.markdown('------')
                with st.expander("Ferramentaria"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd30 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS ",min_value=1,max_value=rd30,value=rd30,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd30)
                            numros5 = numros4-1
                            osespec = rd29.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width17")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width17)
                    
                #Produ√ß√£o
                with st.expander("Produ√ß√£o"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                            if rd36 == 0:
                               st.success('N√£o h√° pend√™ncias')
                            else:
                                numros4 = st.number_input(" Selecione  o  numero  da   OS",min_value=1,max_value=rd36,value=rd36,placeholder="Selecione!")
                                st.metric(label="O.S Existentes", value=rd36)
                                numros5 = numros4-1
                                osespec = rd35.loc[numros5]
                                def load_data():
                                    return pd.DataFrame(osespec)
                                st.checkbox("Estender", value=True, key="use_container_width5")
                                lddt = load_data()
                                st.dataframe(lddt, use_container_width=st.session_state.use_container_width5)

                #Administrativo
                with st.expander("Administrativo"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                            if rd44 == 0:
                               st.success('N√£o h√° pend√™ncias')
                            else:
                                numros4 = st.number_input("Selecione  o numero  da    OS",min_value=1,max_value=rd44,value=rd44,placeholder="Selecione!")
                                st.metric(label="O.S Existentes", value=rd44)
                                numros5 = numros4-1
                                osespec = rd43.loc[numros5]
                                def load_data():
                                    return pd.DataFrame(osespec)
                                st.checkbox("Estender", value=True, key="use_container_width7")
                                lddt = load_data()
                                st.dataframe(lddt, use_container_width=st.session_state.use_container_width7)
                #Comercial
                with st.expander("Comercial"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                            if rd52 == 0:
                               st.success('N√£o h√° pend√™ncias')
                            else:
                                numros4 = st.number_input("Selecione  o  numero   da    OS",min_value=1,max_value=rd52,value=rd52,placeholder="Selecione!")
                                st.metric(label="O.S Existentes", value=rd52)
                                numros5 = numros4-1
                                osespec = rd51.loc[numros5]
                                def load_data():
                                    return pd.DataFrame(osespec)
                                st.checkbox("Estender", value=True, key="use_container_width9")
                                lddt = load_data()
                                st.dataframe(lddt, use_container_width=st.session_state.use_container_width9)

                #Expedi√ß√£o
                with st.expander("Expedi√ß√£o"):
                  if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd60 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione  o  numero   da     OS",min_value=1,max_value=rd60,value=rd60,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd60)
                            numros5 = numros4-1
                            osespec = rd59.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width11")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width11)
                
                #Serralharia
                with st.expander("Serralharia"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd68 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione  o    numero   da    OS",min_value=1,max_value=rd68,value=rd68,placeholder="Selecione!")
                            oi = st.metric(label="O.S Existentes", value=rd68)
                            numros5 = numros4-1
                            osespec = rd67.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width13")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width13)
                
            with tab9:
                st.header(finalizadas_list, divider='blue')
                jam,jam1 = st.columns([0.2,1])
                with jam:
                    with st.expander("Filtros"):
                        genre = st.radio("Selecione ",["MEC√ÇNICA","Por Data"],index=0)
                with st.expander(f"Minhas OS ({MECANICAvalores1})"):
                    diferent1,diferent2 = st.columns([0.2,0.00000000000001])
                    if genre == 'Por Data':
                        with diferent1:
                            cls = st.date_input(' Escolha √° data')
                            status = str(cls)
                            consulta3 = f"SELECT * FROM MECANICA WHERE FINALIZADA = 'Sim' AND DATA = '{status}'"
                            whrlinhas90 = pd.read_sql_query(consulta3, conn)
                            whrlinhas91 = whrlinhas90.shape[0]
                        if whrlinhas91 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros2 = st.number_input(" Selecione   o  numero da  OS ",min_value=1,max_value=whrlinhas91,value=whrlinhas91,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas91)
                            numros3 = numros2-1
                            osespec = whrlinhas90.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width14")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width14)
                        with diferent2:
                            st.button('‚Üª    ')
                    else:
                        numros2 = st.number_input("Selecione   o   numero  da      OS      ",min_value=1,max_value=1000,value=1,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= MECANICAvalores1)
                        numros3 = numros2-1
                        if MECANICAvalores1 == 0:
                           st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec = MECANICAdados1.loc[numros3]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width15")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width15)
                
                with st.expander("PCM" f' ({pcm_id3})'):
                    if 'EL√âTRICA' == 'EL√âTRICA':
                        if pcm_id3 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da O.S    ",min_value=1,max_value=100,value=1,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=pcm_id3)
                            numros5 = numros4-1
                            osespec = pcm3.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key ="use_container_width16")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width16)

                #Ferramentaria
                st.markdown('------')
                with st.expander("Ferramentaria"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd30 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input(" Selecione  o  numero  da  OS ",min_value=1,max_value=rd30,value=rd30,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd30)
                            numros5 = numros4-1
                            osespec = rd29.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width18")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width18)
                
                with st.expander("Produ√ß√£o"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd40 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS   ",min_value=1,max_value=rd40,value=rd40,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd40)
                            numros5 = numros4-1
                            osespec = rd39.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width19")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width19)
                            
                with st.expander("Administrativo"):
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd48 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS     ",min_value=1,max_value=rd48,value=rd48,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd48)
                            numros5 = numros4-1
                            osespec = rd47.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width21")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width21)

                with st.expander("Comercial"):            
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd56 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS       ",min_value=1,max_value=rd56,value=rd56,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd56)
                            numros5 = numros4-1
                            osespec = rd55.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width23")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width23)

                with st.expander("Expedi√ß√£o"):            
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd64 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS        ",min_value=1,max_value=rd64,value=rd64,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd64)
                            numros5 = numros4-1
                            osespec = rd63.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width25")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width25)
                
                with st.expander("Serralharia"):                
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd72 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS          ",min_value=1,max_value=rd72,value=rd72,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd72)
                            numros5 = numros4-1
                            osespec = rd71.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width27")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width27)
                
                with st.expander("Tecnologia da Informa√ß√£o"):    
                    if 'MEC√ÇNICA' == 'MEC√ÇNICA':
                        if rd77 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros4 = st.number_input("Selecione o numero da  OS           ",min_value=1,max_value=rd77,value=rd77,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value=rd77)
                            numros5 = numros4-1
                            osespec = rd76.loc[numros5]
                            def load_data():
                                return pd.DataFrame(osespec)
                            st.checkbox("Estender", value=True, key="use_container_width29")
                            lddt = load_data()
                            st.dataframe(lddt, use_container_width=st.session_state.use_container_width29)

            with tab10:
                col,col1,col2 = st.columns([0.5,1,0.5])
                with col:
                    with st.expander("",expanded=1):
                        st_ = st.container(border=True)
                        st.header(':blue[Localidade üö©] ',divider='blue')
                        quadro =st.radio(
                        "Selecione",
                        ['Quadro A01-A04 (PRENSA P8)','Quadro DA1-DA6 (PULLER E ESTICADEIRA)','Quadro AA1-AA3 (FORNO DE TARUGO)','Quadro EA1-EA4 (SERRA E INCESTADOR)','Quadro FA1-FA3 (FORNO DE ENVELHECIMENTO)'],
                        index=0,
                        ) 
                        
                    with st.expander("",expanded=1):
                        st_3 = st.container(border=True)
                        st.header(':blue[Situa√ß√£o üîé] ',divider='blue')
                        estado =st.radio(
                        "Selecione",
                        ['Equipamento em bom estado e em funcionamento!','Substitui√ß√£o de componente necessaria!','Equipamento danificado mas em funcionamento!'],
                        index=0,
                        )
                    
                    with st.expander("",expanded=1):
                        if estado == 'Substitui√ß√£o de componente necessaria!':
                            mat = pd.read_sql_query("SELECT * FROM Materiais", conn12)
                            mat_shape = mat.shape[0]
                            def example_one():
                                filtered_df = dataframe_explorer(mat, case=False)
                                st.dataframe(filtered_df, use_container_width=True)
                            example_one()               
               
                with col2:
                    with st.expander("",expanded=1):
                        st_1 = st.container(border=True)
                        st.header(':blue[Equipamento ‚öô]',divider='blue')
                        equipamento = st.radio(
                        "Selecione",
                        ['Motores','Sensores','Contatores','Bot√µes','Reler√©s','Disjuntores','Controladores','Fontes','Transformadores','Inversores de frequ√™ncia','Porta fusiveis','Cilindros hidraulicos','Cilindros pneumaticos','Valvulas hidraulicas','Valvulas pneumaticas'],
                        index=0,
                        )
                    
                    if 'strs' == 'strs':
                        if equipamento == 'Motores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Limpeza:'
                            tltle_3 = 'Inspe√ß√£o das Condi√ß√µes Ambientais:'
                            tltle_4 = 'Lubrifica√ß√£o:'
                            tltle_5 = 'Teste de Isolamento:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_8 = 'Teste de Funcionamento:'
                            tltle_9 = 'Calibra√ß√£o (se aplic√°vel):'
                
                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de danos externos, como rachaduras, amassados ou corros√£o no inv√≥lucro do :blue[motor] Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Limpar qualquer sujeira, poeira ou detritos acumulados no :blue[motor] que possam interferir em seu funcionamento.Utilizar produtos de limpeza adequados que n√£o danifiquem o :blue[motor]'
                            errorfull_3 = '¬∞ Verificar se o :blue[motor] est√° instalado em um ambiente adequado em termos de temperatura, umidade e exposi√ß√£o a elementos corrosivos.'
                            errorfull_4 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_5 = '¬∞ Realizar testes de resist√™ncia de isolamento para garantir que n√£o haja curtos-circuitos ou falhas nos enrolamentos do :blue[motor].'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar a tens√£o e a corrente de opera√ß√£o do :blue[motor] para garantir que estejam dentro dos limites especificados pelo fabricante.'
                            errorfull_8 = '¬∞ Ligar brevemente o :blue[motor] para garantir que ele inicie suavemente e funcione sem ru√≠dos ou vibra√ß√µes anormais.Verificar se todos os sistemas de prote√ß√£o (como :blue[disjuntor]es e rel√©s t√©rmicos) est√£o funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se os dispositivos de controle e medi√ß√£o associados ao equipamento est√£o devidamente calibrados e funcionando corretamente.'
                        elif equipamento == 'Sensores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Limpeza:'
                            tltle_3 = 'Inspe√ß√£o das Condi√ß√µes Ambientais:'
                            tltle_4 = 'Verifica√ß√£o da Precis√£o e Sensibilidade:'
                            tltle_5 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_8 = 'Teste de Funcionamento:'
                            tltle_9 = 'Calibra√ß√£o (se aplic√°vel):'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de danos externos, como rachaduras, amassados ou corros√£o no inv√≥lucro do :blue[Sensor] Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Limpar qualquer sujeira, poeira ou detritos acumulados no :blue[Sensor] que possam interferir em seu funcionamento.Utilizar produtos de limpeza adequados que n√£o danifiquem o :blue[Sensor]'
                            errorfull_3 = '¬∞ Verificar se o :blue[Sensor] est√° instalado em um ambiente adequado em termos de temperatura, umidade e exposi√ß√£o a elementos corrosivos.'
                            errorfull_4 = '¬∞ Testar a precis√£o e sensibilidade do :blue[Sensor] em detectar varia√ß√µes ou mudan√ßas nas condi√ß√µes medidas.Comparar as leituras do :blue[Sensor] com padr√µes conhecidos ou outras :blue[fontes confi√°veis de] dados, quando dispon√≠veis.'
                            errorfull_5 = '¬∞ Testar a conex√£o f√≠sica do :blue[Sensor] com o sistema de monitoramento ou controle.Verificar se a comunica√ß√£o entre o :blue[Sensor] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se o :blue[Sensor] est√° recebendo a alimenta√ß√£o adequada de acordo com as especifica√ß√µes do fabricante.Testar a integridade do circuito de alimenta√ß√£o e identificar e corrigir quaisquer problemas de fornecimento de energia.'
                            errorfull_8 = '¬∞ Realizar testes funcionais para verificar se o :blue[Sensor] est√° respondendo corretamente aos est√≠mulos ou condi√ß√µes que ele √© projetado para detectar.Verificar se os sinais de sa√≠da do :blue[Sensor] est√£o dentro dos limites esperados e se correspondem √†s condi√ß√µes reais.'
                            errorfull_9 = '¬∞ Verificar se o :blue[Sensor] est√° calibrado corretamente de acordo com as especifica√ß√µes do fabricante.Realizar calibra√ß√µes peri√≥dicas conforme recomendado pelo fabricante ou conforme necess√°rio com base nos resultados das medi√ß√µes.'
                        elif equipamento == 'Contatores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Verifica√ß√£o dos Contatos'
                            tltle_3 = 'Verifica√ß√£o dos Mecanismos de Acionamento'
                            tltle_4 = 'Verifica√ß√£o das Bobinas:'
                            tltle_5 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Contator].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'

                            errorfull_2 = '¬∞ Inspecionar os contatos do :blue[Contator] quanto a sinais de desgaste, queimaduras, corros√£o ou pontos de solda.Limpar os contatos, se necess√°rio, para remover quaisquer dep√≥sitos ou acumula√ß√µes que possam interferir no funcionamento.'
                            errorfull_3 = '¬∞ Testar o mecanismo de acionamento do :blue[Contator] para garantir que esteja operando suavemente e sem obstru√ß√µes.Verificar se n√£o h√° pontos de travamento ou desalinhamento no mecanismo.'
                            errorfull_4 = '¬∞ Verificar a integridade e a resist√™ncia das bobinas do :blue[Contator].Testar a opera√ß√£o das bobinas para garantir que estejam funcionando corretamente e respondendo aos comandos de acionamento.'
                            errorfull_5 = '¬∞ Verificar se a tens√£o e a corrente de opera√ß√£o do :blue[Contator] est√£o dentro dos limites especificados pelo fabricante.Testar o :blue[Contator] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Contator] e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Contator] com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Contator] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'                          
                        elif equipamento == 'Bot√µes':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_3 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_4 = 'Verifica√ß√£o da Ilumina√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o da Veda√ß√£o:'
                            tltle_6 = 'Verifica√ß√£o da Durabilidade:'
                            tltle_7 = 'Ajuste da Sensibilidade:'
                            tltle_8 = 'Verifica√ß√£o da Fixa√ß√£o:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no bot√£o. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no bot√£o, evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar o funcionamento do bot√£o, garantindo que pression√°-lo acione o comando desejado de forma consistente.'
                            errorfull_3 = '¬∞ Verificar todas as conex√µes do bot√£o quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_4 = '¬∞ Verificar a ilumina√ß√£o do bot√£o, se aplic√°vel, garantindo que esteja funcionando corretamente.'
                            errorfull_5 = '¬∞ Verificar a veda√ß√£o do bot√£o, garantindo que esteja intacta para proteger contra poeira e umidade.'
                            errorfull_6 = '¬∞ Verificar a durabilidade do bot√£o, avaliando sua resist√™ncia ao uso repetido ao longo do tempo.'
                            errorfull_7 = '¬∞ Ajustar a sensibilidade do bot√£o, se aplic√°vel, para garantir que o acionamento ocorra com a press√£o adequada.'
                            errorfull_8 = '¬∞ Verificar a fixa√ß√£o do bot√£o, garantindo que esteja firmemente instalado e sem folgas.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral do bot√£o, garantindo que ele opere corretamente em todas as condi√ß√µes de uso.'
                        elif equipamento == 'Reler√©s':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_2 = 'Verifica√ß√£o dos Contatos'
                            tltle_3 = 'Verifica√ß√£o dos Mecanismos de Acionamento'
                            tltle_4 = 'Verifica√ß√£o das Bobinas:'
                            tltle_5 = 'Verifica√ß√£o da Tens√£o e Corrente de Opera√ß√£o:'
                            tltle_6 = 'Alinhamento e Balanceamento (se aplic√°vel):'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Rel√©].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Inspeccionar os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou aquecimento excessivo.Apertar quaisquer terminais soltos ou conex√µes frouxas.'
                            errorfull_2 = '¬∞ Inspecionar os contatos do :blue[Rel√©] quanto a sinais de desgaste, queimaduras, corros√£o ou pontos de solda.Limpar os contatos, se necess√°rio, para remover quaisquer dep√≥sitos ou acumula√ß√µes que possam interferir no funcionamento.'
                            errorfull_3 = '¬∞ Testar o mecanismo de acionamento do :blue[Rel√©] para garantir que esteja operando suavemente e sem obstru√ß√µes.Verificar se n√£o h√° pontos de travamento ou desalinhamento no mecanismo.'
                            errorfull_4 = '¬∞ Verificar a integridade e a resist√™ncia das bobinas do :blue[Rel√©].Testar a opera√ß√£o das bobinas para garantir que estejam funcionando corretamente e respondendo aos comandos de acionamento.'
                            errorfull_5 = '¬∞ Verificar se a tens√£o e a corrente de opera√ß√£o do :blue[Rel√©] est√£o dentro dos limites especificados pelo fabricante.Testar o :blue[Rel√©] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_6 = '¬∞ Verificar o alinhamento do :blue[motor] com o acoplamento ou a carga e realizar ajustes conforme necess√°rio.Verificar se h√° desequil√≠brios no rotor e equilibrar, se necess√°rio.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Rel√©] e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Rel√©] com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Rel√©] e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                        elif equipamento == 'Disjuntores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o Nominal:'
                            tltle_4 = 'Teste de Funcionamento:'
                            tltle_5 = 'Verifica√ß√£o do Disparador:'
                            tltle_6 = 'Verifica√ß√£o do Mecanismo de Atua√ß√£o:'
                            tltle_7 = 'Teste de Prote√ß√£o contra Sobrecarga:'
                            tltle_8 = 'Teste de Prote√ß√£o contra Curto-Circuito:'
                            tltle_9 = 'Teste de Prote√ß√£o contra Falta √† Terra:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[disjuntor]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[disjuntor], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[disjuntor] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar se a tens√£o nominal do :blue[disjuntor] est√° de acordo com as especifica√ß√µes do equipamento. Substituir o :blue[disjuntor] se a tens√£o estiver fora dos limites especificados.'
                            errorfull_4 = '¬∞ Realizar um teste de funcionamento completo no :blue[disjuntor], incluindo abertura e fechamento sob carga. Verificar se o :blue[disjuntor] opera corretamente em todas as condi√ß√µes.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do disparador do :blue[disjuntor], garantindo que ele atue adequadamente em caso de sobrecarga ou curto-circuito.'
                            errorfull_6 = '¬∞ Verificar o mecanismo de atua√ß√£o do :blue[disjuntor], assegurando que ele opere suavemente e sem travamentos.'
                            errorfull_7 = '¬∞ Realizar um teste de prote√ß√£o contra sobrecarga, aplicando uma corrente ligeiramente acima da corrente nominal para verificar se o :blue[disjuntor] interrompe a corrente conforme esperado.'
                            errorfull_8 = '¬∞ Realizar um teste de prote√ß√£o contra curto-circuito, aplicando uma corrente muito alta para verificar se o :blue[disjuntor] interrompe a corrente rapidamente e de forma segura.'
                            errorfull_9 = '¬∞ Realizar um teste de prote√ß√£o contra falta √† terra, simulando uma falta √† terra para verificar se o :blue[disjuntor] atua corretamente e interrompe a corrente.'
                        elif equipamento == 'Controladores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o dos Cart√µes de E/S:'
                            tltle_4 = 'Verifica√ß√£o da Alimenta√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o dos Programas:'
                            tltle_6 = 'Backup dos Programas:'
                            tltle_7 = 'Teste de Comunica√ß√£o:'
                            tltle_8 = 'Teste de Entradas e Sa√≠das:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do o {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do o {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no controlador l√≥gico program√°vel (:blue[CLP]). Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[CLP], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[CLP] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar os cart√µes de entrada e sa√≠da (E/S) do :blue[CLP], garantindo que estejam corretamente instalados e sem sinais de danos.'
                            errorfull_4 = '¬∞ Verificar a alimenta√ß√£o do :blue[CLP], garantindo que a tens√£o de entrada esteja dentro dos limites especificados e que n√£o haja flutua√ß√µes de tens√£o.'
                            errorfull_5 = '¬∞ Verificar os programas armazenados no :blue[CLP], assegurando que estejam corretamente carregados e sem erros de programa√ß√£o.'
                            errorfull_6 = '¬∞ Realizar um backup dos programas armazenados no :blue[CLP], garantindo que haja uma c√≥pia de seguran√ßa em caso de perda de dados.'
                            errorfull_7 = '¬∞ Realizar um teste de comunica√ß√£o com o :blue[CLP], garantindo que seja poss√≠vel estabelecer comunica√ß√£o e fazer upload/download de programas.'
                            errorfull_8 = '¬∞ Realizar um teste de entradas e sa√≠das do :blue[CLP], garantindo que todas as entradas e sa√≠das estejam operando corretamente conforme especificado no programa.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral do :blue[CLP], incluindo a execu√ß√£o do programa e verifica√ß√£o do comportamento do sistema controlado.'
                        elif equipamento == 'Fontes':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o de Sa√≠da:'
                            tltle_4 = 'Verifica√ß√£o da Corrente de Sa√≠da:'
                            tltle_5 = 'Verifica√ß√£o da Estabilidade:'
                            tltle_6 = 'Verifica√ß√£o da Prote√ß√£o contra Surtos:'
                            tltle_7 = 'Teste de Prote√ß√£o:'
                            tltle_8 = 'Teste de Sobrecarga:'
                            tltle_9 = 'Teste de Funcionamento Geral:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do a {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do o {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos na :blue[fonte de alimenta√ß√£o]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular na :blue[fonte de alimenta√ß√£o], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes da :blue[fonte de alimenta√ß√£o] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar a tens√£o de sa√≠da da :blue[fonte de alimenta√ß√£o], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_4 = '¬∞ Verificar a corrente de sa√≠da da :blue[fonte de alimenta√ß√£o], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_5 = '¬∞ Verificar a estabilidade da :blue[fonte de alimenta√ß√£o], garantindo que n√£o haja flutua√ß√µes significativas na tens√£o ou corrente de sa√≠da.'
                            errorfull_6 = '¬∞ Verificar a prote√ß√£o contra surtos da :blue[fonte de alimenta√ß√£o], garantindo que esteja funcionando corretamente para proteger o equipamento conectado contra picos de tens√£o.'
                            errorfull_7 = '¬∞ Realizar um teste de prote√ß√£o da :blue[fonte de alimenta√ß√£o], garantindo que ela atue corretamente em caso de sobretens√£o, subtens√£o ou curto-circuito.'
                            errorfull_8 = '¬∞ Realizar um teste de sobrecarga na :blue[fonte de alimenta√ß√£o], aplicando uma carga maior que a nominal para verificar se ela continua operando dentro dos limites especificados.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento geral da :blue[fonte de alimenta√ß√£o], garantindo que ela opere corretamente em todas as condi√ß√µes de carga e temperatura.'
                        elif equipamento == 'Transformadores':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Conex√µes:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o Prim√°ria:'
                            tltle_4 = 'Verifica√ß√£o da Tens√£o Secund√°ria:'
                            tltle_5 = 'Verifica√ß√£o dos Enrolamentos:'
                            tltle_6 = 'Teste de Isola√ß√£o:'
                            tltle_7 = 'Teste de Resist√™ncia de Isolamento:'
                            tltle_8 = 'Verifica√ß√£o do Resfriamento:'
                            tltle_9 = 'Teste de Funcionamento:'

                            sucessfull = f'Conclu√≠do a {tltle}'
                            sucessfull_1 = f'Conclu√≠do a {tltle_1}'
                            sucessfull_2 = f'Conclu√≠do a {tltle_2}'
                            sucessfull_3 = f'Conclu√≠do a {tltle_3}'
                            sucessfull_4 = f'Conclu√≠do a {tltle_4}'
                            sucessfull_5 = f'Conclu√≠do a {tltle_5}'
                            sucessfull_6 = f'Conclu√≠do o {tltle_6}'
                            sucessfull_7 = f'Conclu√≠do o {tltle_7}'
                            sucessfull_8 = f'Conclu√≠do a {tltle_8}'
                            sucessfull_9 = f'Conclu√≠do o {tltle_9}'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[transformador]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[transformador], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar todas as conex√µes do :blue[transformador] quanto a sinais de frouxid√£o ou corros√£o. Apertar quaisquer conex√µes soltas e limpar as conex√µes corro√≠das.'
                            errorfull_3 = '¬∞ Verificar a tens√£o prim√°ria do :blue[transformador], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_4 = '¬∞ Verificar a tens√£o secund√°ria do :blue[transformador], garantindo que esteja dentro dos limites especificados pelo fabricante.'
                            errorfull_5 = '¬∞ Verificar os enrolamentos do :blue[transformador] quanto a sinais de danos, superaquecimento ou desgaste excessivo.'
                            errorfull_6 = '¬∞ Realizar um teste de isola√ß√£o no :blue[transformador] para verificar se h√° algum curto-circuito ou falha no isolamento.'
                            errorfull_7 = '¬∞ Realizar um teste de resist√™ncia de isolamento para verificar a resist√™ncia entre os enrolamentos e o chassi do :blue[transformador].'
                            errorfull_8 = '¬∞ Verificar o sistema de resfriamento do :blue[transformador], garantindo que os radiadores ou ventiladores estejam funcionando corretamente.'
                            errorfull_9 = '¬∞ Realizar um teste de funcionamento completo do :blue[transformador], garantindo que ele opere corretamente em todas as condi√ß√µes de carga e temperatura.'
                        elif equipamento == 'Inversores de frequ√™ncia':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o dos Par√¢metros:'
                            tltle_3 = 'Verifica√ß√£o dos Cabos e Conex√µes:'
                            tltle_4 = 'Verifica√ß√£o da Ventila√ß√£o:'
                            tltle_5 = 'Verifica√ß√£o dos Enrolamentos do :blue[Motor]:'
                            tltle_6 = 'Verifica√ß√£o da Tens√£o e Corrente de Sa√≠da:'
                            tltle_7 = 'Verifica√ß√£o dos Dispositivos de Prote√ß√£o:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o e Comunica√ß√£o:'
                            tltle_9 = 'Aperto dos Terminais e Conex√µes:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Inversor].Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Remova qualquer sujeira, poeira ou detritos que possam acumular no :blue[Inversor] e interferir em seu funcionamento.Use ar comprimido ou um pano limpo e seco para limpar o :blue[Inversor] , evitando o uso de produtos qu√≠micos que possam danificar os componentes.'
                            errorfull_2 = '¬∞ Verifique os par√¢metros de opera√ß√£o do :blue[Inversor]  para garantir que estejam configurados conforme as especifica√ß√µes do fabricante e os requisitos de aplica√ß√£o.Fa√ßa ajustes nos par√¢metros, se necess√°rio, para otimizar o desempenho do inversor ou corrigir problemas de opera√ß√£o.'
                            errorfull_3 = '¬∞ Inspecione os cabos de alimenta√ß√£o e conex√µes el√©tricas quanto a sinais de desgaste, danos ou problemas de conex√£o.Aperte quaisquer terminais soltos ou conex√µes frouxas para garantir uma conex√£o el√©trica segura.'
                            errorfull_4 = '¬∞ Verifique se os ventiladores ou sistemas de resfriamento do :blue[Inversor]  est√£o funcionando corretamente.Limpe os filtros de ar ou ventiladores obstru√≠dos para garantir uma boa circula√ß√£o de ar e evitar o superaquecimento.'
                            errorfull_5 = '¬∞ Verifique os enrolamentos do :blue[motor] conectado ao :blue[Inversor]  quanto a sinais de superaquecimento, danos ou desgaste excessivo.Me√ßa a temperatura dos enrolamentos durante a opera√ß√£o para identificar problemas de sobreaquecimento.'
                            errorfull_6 = '¬∞ Me√ßa a tens√£o e a corrente de sa√≠da do :blue[Inversor] para garantir que estejam dentro dos limites especificados pelo fabricante.Teste o :blue[Inversor]  em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_7 = '¬∞ Verificar se os dispositivos de prote√ß√£o, como :blue[disjuntor]es ou fus√≠veis, est√£o instalados e funcionando corretamente para proteger o :blue[Inversor]  e o circuito contra sobrecargas ou curtos-circuitos.'
                            errorfull_8 = '¬∞ Testar a conex√£o f√≠sica do :blue[Inversor]  com o sistema de controle ou circuito.Verificar se a comunica√ß√£o entre o :blue[Inversor]  e outros dispositivos ou sistemas est√° funcionando corretamente.'
                            errorfull_9 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                        elif equipamento == 'Porta fusiveis':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o da Continuidade:'
                            tltle_3 = 'Verifica√ß√£o da Tens√£o e Corrente de Sa√≠da:'
                            tltle_4 = 'Verifica√ß√£o dos Terminais:'
                            tltle_5 = 'Aperto dos Terminais e Conex√µes:'
                            tltle_6 = 'Teste de Funcionamento:'
                            tltle_7 = 'Verifica√ß√£o da Compatibilidade dos Fus√≠veis:'
                            tltle_8 = 'Verifica√ß√£o da Conex√£o √† Terra:'
                            tltle_9 = 'Verifica√ß√£o da Prote√ß√£o contra Surtos:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o, sujeira ou danos externos no inv√≥lucro do :blue[Porta fusiveis]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Remova qualquer sujeira, poeira ou detritos que possam acumular no :blue[Porta fusiveis] e interferir em seu funcionamento. Use ar comprimido ou um pano limpo e seco para limpar o :blue[Porta fusiveis], evitando o uso de produtos qu√≠micos que possam danificar os componentes.'
                            errorfull_2 = '¬∞ Verifique a continuidade dos contatos do :blue[Porta fusiveis] para garantir que estejam em boas condi√ß√µes de funcionamento. Substitua os fus√≠veis quebrados ou danificados conforme necess√°rio.'
                            errorfull_3 = '¬∞ Me√ßa a tens√£o e a corrente de sa√≠da do :blue[Porta fusiveis] para garantir que estejam dentro dos limites especificados pelo fabricante.Teste o :blue[Porta fusiveis] em carga para garantir que esteja operando conforme o esperado.'
                            errorfull_4 = '¬∞ Verifique os terminais do :blue[Porta fusiveis] quanto a sinais de desgaste, corros√£o ou folga. Aperte quaisquer terminais soltos para garantir uma conex√£o el√©trica segura.'
                            errorfull_5 = '¬∞ Verificar se todos os terminais e conex√µes est√£o firmemente apertados para garantir uma conex√£o el√©trica segura e confi√°vel.'
                            errorfull_6 = '¬∞ Realizar testes de funcionamento no :blue[Porta fusiveis] para garantir sua opera√ß√£o adequada.'
                            errorfull_7 = '¬∞ Verifique se os fus√≠veis utilizados s√£o compat√≠veis com as especifica√ß√µes do equipamento protegido.'
                            errorfull_8 = '¬∞ Verificar se a conex√£o √† terra do :blue[Porta fusiveis] est√° correta e em boas condi√ß√µes.'
                            errorfull_9 = '¬∞ Verificar se o :blue[Porta fusiveis] possui prote√ß√£o contra surtos adequada para proteger os equipamentos conectados contra picos de tens√£o.'
                        elif equipamento == 'Cilindros hidraulicos':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Cilindro hidraulico]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Cilindro hidraulico], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Cilindro hidraulico] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Cilindro hidraulico] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Cilindro hidraulico] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Cilindro hidraulico] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Cilindros pneumaticos':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Cilindro pneumatico]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Cilindro pneumatico], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Cilindro pneumatico] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Cilindro pneumatico] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Cilindro pneumatico] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Cilindro pneumatico] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Valvulas hidraulicas':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Valvulas hidraulicas]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Valvulas hidraulicas], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Valvulas hidraulicas] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Valvulas hidraulicas] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Valvulas hidraulicas] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Valvulas hidraulicas] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                        elif equipamento == 'Valvulas pneumaticas':
                            tltle = 'Inspe√ß√£o Visual Externa:'
                            tltle_1 = 'Limpeza:'
                            tltle_2 = 'Verifica√ß√£o das Veda√ß√µes:'
                            tltle_3 = 'Verifica√ß√£o da Press√£o de Opera√ß√£o:'
                            tltle_4 = 'Verifica√ß√£o dos Conex√µes e Mangueiras:'
                            tltle_5 = 'Verifica√ß√£o do Funcionamento:'
                            tltle_6 = 'Lubrifica√ß√£o:'
                            tltle_7 = 'Teste de Vazamento:'
                            tltle_8 = 'Verifica√ß√£o dos An√©is de Veda√ß√£o:'
                            tltle_9 = 'Verifica√ß√£o dos Amortecedores:'

                            sucessfull = f'Concluido a :blue[{tltle}]'
                            sucessfull_1 = f'Concluido a :blue[{tltle_1}]'
                            sucessfull_2 = f'Concluido a :blue[{tltle_2}]'
                            sucessfull_3 = f'Concluido a :blue[{tltle_3}]'
                            sucessfull_4 = f'Concluido a :blue[{tltle_4}]'
                            sucessfull_5 = f'Concluido a :blue[{tltle_5}]'
                            sucessfull_6 = f'Concluido o :blue[{tltle_6}]'
                            sucessfull_7 = f'Concluido a :blue[{tltle_7}]'
                            sucessfull_8 = f'Concluido a :blue[{tltle_8}]'
                            sucessfull_9 = f'Concluido o :blue[{tltle_9}]'

                            errorfull = '¬∞ Verificar sinais de desgaste, corros√£o ou danos externos no :blue[Valvulas pneumaticas]. Assegurar que todas as conex√µes e fixa√ß√µes estejam seguras e em bom estado.'
                            errorfull_1 = '¬∞ Limpar qualquer sujeira, poeira ou detritos que possam acumular no :blue[Valvulas pneumaticas], evitando interfer√™ncias no seu funcionamento.'
                            errorfull_2 = '¬∞ Verificar as veda√ß√µes do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir as veda√ß√µes danificadas conforme necess√°rio.'
                            errorfull_3 = '¬∞ Verificar se a press√£o de opera√ß√£o do :blue[Valvulas pneumaticas] est√° dentro dos limites especificados. Ajustar a press√£o conforme necess√°rio.'
                            errorfull_4 = '¬∞ Verificar todas as conex√µes e mangueiras quanto a sinais de vazamento ou danos. Apertar quaisquer conex√µes frouxas e substituir mangueiras danificadas.'
                            errorfull_5 = '¬∞ Verificar o funcionamento do :blue[Valvulas pneumaticas] em todas as suas posi√ß√µes. Testar todas as fun√ß√µes para garantir seu correto funcionamento.'
                            errorfull_6 = '¬∞ Verificar o n√≠vel de √≥leo ou graxa nos rolamentos e, se necess√°rio, lubrificar de acordo com as especifica√ß√µes do fabricante.'
                            errorfull_7 = '¬∞ Realizar um teste de vazamento no :blue[Valvulas pneumaticas] para garantir que n√£o haja vazamentos ap√≥s a manuten√ß√£o.'
                            errorfull_8 = '¬∞ Verificar os an√©is de veda√ß√£o do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir os an√©is danificados conforme necess√°rio.'
                            errorfull_9 = '¬∞ Verificar os amortecedores do :blue[Valvulas pneumaticas] quanto a sinais de desgaste ou danos. Substituir os amortecedores danificados conforme necess√°rio.'
                    
                with col1:
                    with st.expander("",expanded=1):
                        st.header(':blue[CheckList üìã]',divider='blue')
                        check_9 =st.text_input('T.A.G de refer√™ncia do equipamento:')
                        componente = (f'{check_9} pertence a {equipamento}')
                        check = st.checkbox(tltle)
                        if check:
                            st.success(sucessfull)
                        else:
                            st.error(errorfull)
                    
                        check_1 =st.checkbox(tltle_1)
                        if check_1:
                            st.success(sucessfull_1)
                        else:
                            st.error(errorfull_1)
                        
                        check_1_2 =st.checkbox(tltle_2)
                        if check_1_2:
                            st.success(sucessfull_2)
                        else:
                            st.error(errorfull_2)
                        
                        check_2 =st.checkbox(tltle_3)
                        if check_2:
                            st.success(sucessfull_3)
                            if equipamento == 'Disjuntores' or equipamento == 'Fontes' or equipamento == 'Transformadores':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a tens√£o (V): ',value=0.0,step=0.1)
                            if equipamento == 'Porta fusiveis':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                            if  equipamento == 'Cilindros hidraulicos' or equipamento == 'Cilindros pneumaticos'or equipamento =='Valvulas hidraulicas'or equipamento =='Valvulas pneumaticas':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a press√£o (BAR/PSI):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_3)
                        check_3 =st.checkbox(tltle_4)
                        if check_3:
                            st.success(sucessfull_4)
                            if equipamento == 'Controladores' or equipamento == 'Transformadores':
                                col,col1,col2 = st.columns([1,1,3])
                                with col:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_4)
                        check_4 =st.checkbox(tltle_5)
                        if check_4:
                            st.success(sucessfull_5)
                            if equipamento == 'Contatores' or equipamento == 'Reler√©s':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_5)
                            
                        if not equipamento == 'Contatores' and not equipamento == 'Reler√©s'and not equipamento == 'Inversores de frequ√™ncia' and not equipamento == 'Porta fusiveis' and not equipamento == 'Sensores':
                            check_5 =st.checkbox(tltle_6)
                            if check_5:
                                st.success(sucessfull_6)
                            else:
                                st.error(errorfull_6 )
                        
                        check_6 =st.checkbox(tltle_7)
                        if check_6:
                            st.success(sucessfull_7)
                            if equipamento == 'Motores' or equipamento == 'Sensores':
                                col,col1,col2 = st.columns([1,1,5])
                                with col:
                                    st.number_input('Especifique a corrente (A):',value=0.0,step=0.1)
                                with col1:
                                    st.number_input('Especifique a tens√£o (V):',value=0.0,step=0.1)
                        else:
                            st.error(errorfull_7)
                        
                        check_7 =st.checkbox(tltle_8)
                        if check_7:
                            st.success(sucessfull_8)
                        else:
                            st.error(errorfull_8)

                        check_8 =st.checkbox('Calibra√ß√£o (se aplic√°vel):')
                        if check_8:
                            st.success(sucessfull_9)
                        else:
                            st.error(errorfull_9)
                        check_10 =st.text_area('Registro de Manuten√ß√£o:')
                        
                        if not equipamento == 'Contatores' and not equipamento == 'Reler√©s'and not equipamento == 'Inversores de frequ√™ncia' and not equipamento == 'Porta fusiveis' and not equipamento == 'Sensores':
                            checkslists = [check_1,check_1_2,check_2,check_3,check_4,check_5,check_6,check_7,check_8,check_9,check_10]
                            tst = all(checkslists)
                            
                        else:
                            checkslists = [check_1,check_1_2,check_2,check_3,check_4,check_6,check_7,check_8,check_9,check_10]
                            tst = all(checkslists)
                        
                        if tst:
                            envio = st.button('(‚åê‚ñ†_‚ñ†)')
                            if envio:
                                cursor.execute("INSERT INTO checklistM (Tag,Local,Equipamento,Situa√ß√£o,Check_1,Check_2,Check_3,Check_4,Check_5,Check_6,Check_7,Check_8,Check_9,Relatorio,Hora,Data,M√™s) VALUES (?,?,?,?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)", (check_9,quadro,equipamento,estado,(f'{tltle} Concluido'),(f'{tltle_1} Concluido'),(f'{tltle_2} Concluido'),(f'{tltle_3} Concluido'),(f'{tltle_4} Concluido'),(f'{tltle_5} Concluido'),(f'{tltle_6} Concluido'),(f'{tltle_7} Concluido'),(f'{tltle_8} Concluido'),(f'{tltle_9} Concluido'),timenow,datenow,monthnow))
                                conn.commit()
                    
            with tab11:
                st.header (aviso_list,divider='blue')
                omaga = st.multiselect('Selecione:',acao_list,max_selections=1)
                if not omaga == []:
                    corretivas = pd.read_sql_query(f"SELECT * FROM MECANICA WHERE A√á√ÉO = '{omaga[0]}'", conn)
                    corretivas_shape = corretivas.shape[0]
                if omaga == []:
                    st.success('Escolha um tipo de a√ß√£o')
                else:
                    if corretivas_shape == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        corretivas = pd.read_sql_query(f"SELECT * FROM MECANICA WHERE A√á√ÉO = '{omaga[0]}'", conn)
                        corretivas_shape = corretivas.shape[0]
                        st.metric(label="O.S Existentes", value=corretivas_shape)
                        numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=corretivas_shape,value=corretivas_shape,placeholder="Selecione!")
                        numros3 = numros2-1
                        serie_pdf = corretivas.loc[numros3]
                        def load_data():
                            return pd.DataFrame(serie_pdf)
                        st.checkbox("Estender", value=True, key="use_container_width17")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width17)
                        dt = corretivas.loc[numros3]
                        dt = dt.tolist()
                        with open(f"./Data/geral_Mec√¢nica.pdf", 'rb') as file:
                            pdf_reader = PyPDF2.PdfReader(file)
                            bttn = st.download_button(
                            label="Exportar O.S üñ®",
                            key= "download_button",
                            data= file,
                            file_name=f"O.S {dt[0]}.pdf",
                            mime='application/octet-stream',
                            help='Por favor atualize antes de fazer a exporta√ß√£o do arquivo!'
                        )
                    
                        usuario = 'Mec√¢nica'
                        cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                        if cursor1.fetchall():
                            cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                            imagens = cursor1.fetchall()
                            oe = imagens[0][1]
                            imagem = Image.open(BytesIO(oe))

                        localx = corretivas.loc[numros3]
                        pmg = localx.tolist()
                        Solicitante = solicitante_titulo
                        Data = 'Data:'
                        Hora = 'Horario:'
                        Setor = 'Setor:'
                        Os = 'O.S:'
                        maqx = local_titulo
                        dados = [Solicitante,Data,Hora,Setor,Os,maqx,'']
                        img = Image.open('./Midia/ssmm.jpg')
                        img1 = Image.open('./Midia/sales.jpeg')

                        def hello(c,pmg):
                            o = 0
                            b = []
                            for s in str(pmg[1]):
                                if s.isalpha():
                                    o += 1
                                    tmh = 4 * o + 58 
                                    b.append(tmh)

                            ct = []
                            for s in str(pmg[2]):
                                if not pmg[2] =='Produ√ß√£o':
                                    if s.isalpha():
                                        o += 1
                                        tmh = 4 * o + 268
                                        ct.append(tmh)
                                    else:
                                        ''
                                        
                            idx = 0             
                            for james in dados:
                                idx = idx + 1
                                largura_da_linha = 0.1
                                width, height = 580, 50
                                raio = 10
                                if idx == 1:
                                #SOLICITANTE
                                    t1,t2 = 15,730
                                    t3,t4 = 58,730
                                    t5,t6 = 20,662
                                    t7,t8 = 380,662
                                    t9,t10 = 500,210
                                    t11,t12 = 90,642

                                    texto = f'{pmg[1]}'
                                    text = f'{pmg[5]}'
                                    textox = 'Grau de ocorr√™ncia :'
                                    textoxx = 'Especialidade :'
                                    textos = ''
                                    x1, y1 = b[9], 728
                                    x2, y2 = 58, 728
                                    widt, heigh = 200, 30
                                    r,r1 = 18,630
                                    r2,r3 = 380,630
                                    k1,k2,k3,k4 = 250,680,250,420
                                if idx == 2:
                                #DAT
                                    t1,t2 = 15,705
                                    t3,t4 = 38,705
                                    t5,t6 = 18,583
                                    t7,t8 = 380,583
                                    t9,t10 = 500,210
                                    t11,t12 = 90,563

                                    texto = f'{pmg[6]}'
                                    text = f'{pmg[8]}'
                                    textox = 'A√ß√£o :'
                                    textoxx = 'Data de finaliza√ß√£o :'
                                    textos = ''
                                    x1, y1 = 75, 703
                                    x2, y2 = 37, 703
                                    r,r1 = 18,550
                                    r2,r3 = 380,550
                                    k1,k2,k3,k4 = 350,680,350,420
                                if idx == 3:
                                    #HORA
                                    t1,t2 = 250,730
                                    t3,t4 = 283,730
                                    t5,t6 = 18,513
                                    t7,t8 = 380,513
                                    t9,t10 = 500,210
                                    t11,t12 = 90,493

                                    texto = f'{pmg[7]}'
                                    text = f'{pmg[9]}'
                                    textox = 'Finalizada? :'
                                    textoxx = 'Horario de finaliza√ß√£o :'
                                    textos = ''

                                    x1, y1 = 283, 728
                                    x2, y2 = 310, 728
                                    r,r1 = 18,480
                                    r2,r3 = 380,480
                                    k1,k2,k3,k4 = 500,10,580,10
                                if idx == 4:
                                #SETOR
                                    t1,t2 = 250,705
                                    t3,t4 = 275,705
                                    t5,t6 = 18,422
                                    t9,t10 = 510,15
                                    t11,t12 = 430,642

                                    texto = f'{pmg[2]}'
                                    text = f'{pmg[12]}'
                                    textox = 'Ocorr√™ncia :'
                                    textos = 'Bruno Kappaun'
        
                                    x1, y1 = 275, 703
                                    x2, y2 = ct[0], 703
                                    widt, heigh = 560, 60
                                    r,r1 = 18,360
                                if idx == 5:
                                    #OS
                                    t1,t2 = 430,730
                                    t3,t4 = 448,730
                                    t5,t6 = 25,345
                                    t11,t12 = 430,563

                                    texto = f'N¬∞ 00{pmg[0]}'
                                    text = f'{pmg[10]}'
                                    textox = 'Visualiza√ß√£o do problema:'
                                    x1, y1 = 448, 728
                                    x2, y2 = 475, 728
                                if idx == 6:
                                #maquina
                                    t1,t2 = 430,705
                                    t3,t4 = 455,705
                                    t5,t6 = 30,170
                                    t11,t12 = 430,493
                                    texto =f'{pmg[13]}'
                                    textox = 'Visualiza√ß√£o p√≥s problema:'
                                    text = f'{pmg[11]}'
                                    x1, y1 = 455, 703
                                    x2, y2 = 510, 703
                                if idx == 7:
                                    t11,t12 = 25,410
                                    text = f'{pmg[3]}'
                
                                pdfmetrics.registerFont(TTFont('font', './Fontes/ASENINE_.ttf'))
                                cor_do_texto = (0,0,0)
                                font_name = 'font' 

                                pdfmetrics.registerFont(TTFont('ASS', './Fontes/ASSINATURA.ttf'))
                                cor_do_texto = (0,0,0)
                                font_namex = 'ASS' 
            
                                textobject = c.beginText(t1, t2)
                                textobject.setFont(font_name , 13)
                                textobject.setTextOrigin(t1, t2)
                                textobject.textLine(f"{james}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobject)
                                c.setLineWidth(largura_da_linha)
                                c.line(x1,y1,x2,y2)
        
                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t3, t4)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t3, t4)
                                textobjectx.textLine(f"{texto}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t5, t6)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t5, t6)
                                textobjectx.textLine(f"{textox}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t7, t8)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t7, t8)
                                textobjectx.textLine(f"{textoxx}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t9, t10)
                                textobjectx.setFont(font_namex, 10)
                                textobjectx.setTextOrigin(t9, t10)
                                textobjectx.textLine(f"{textos}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t11, t12)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t11, t12)
                                textobjectx.textLine(f"{text}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                raio = 5
                                c.roundRect(r, r1, widt, heigh, raio, stroke=1, fill=0)

                                width, height = 200, 30
                                raio = 5
                                c.roundRect(r2, r3, width, height, raio, stroke=1, fill=0)
                                c.line(k1,k2,k3,k4)
                            width, height = 700, 50
                            raio = 10
                            r,r1 = 8,800
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)

                            width, height = 580, 680
                            raio = 10
                            r,r1 = 8,0
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)
    
                            x, y = 0,750
                            c.drawInlineImage(img, x,y, width=600,height=100)
                            x, y = 10,180
                            x1,y1 = 10, 20
                            if not corretivas.empty:
                                cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                if cursor1.fetchall():
                                    cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                    imagens = cursor1.fetchall()
                                    imagens
                                    if imagens[0][1]:
                                        oe = imagens[0][1]
                                        imagem = Image.open(BytesIO(oe))
                                        c.drawInlineImage(imagem, x,y, width=400,height=145)  
                                    if imagens[0][2]:
                                        oie = imagens[0][2]
                                        imagem2 = Image.open(BytesIO(oie))
                                        c.drawInlineImage(imagem2, x1,y1, width=400,height=145)
                                    
                        c = canvas.Canvas(f"./Data/geral_{usuario}.pdf")
                        hh = hello(c,pmg)
                        c.save()
            
#Ferramentaria
allln13 = pd.read_sql_query("SELECT * FROM Ferramentaria", conn)
allln14 = allln13.shape[0]
consulta7 = "SELECT * FROM Ferramentaria"
allinhas15 = pd.read_sql_query(consulta7, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta8 = "SELECT * FROM Ferramentaria WHERE FINALIZADA = 'N√£o'"
whrlinhas12 = pd.read_sql_query(consulta8, conn)
whrlinhas13 = whrlinhas12.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM Ferramentaria WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas15 = cursor.fetchall()
whrlinhas16 = pd.DataFrame(whrlinhas15)
whrlinhas17 = whrlinhas16.shape[0]

if fLIDERES == 'Ivson Paulino':
    if fSETOR == 'Ferramentaria':
        if senha == '70':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl5 = st.button("DELETAR TABELA")
            #if cl5:
                #cursor.execute("DROP TABLE Ferramentaria")
                #conn.commit()
            with ps6:
                st.title(tltle_list)

            st.markdown("---")
            tab26,tab27,tab28,tab29= st.tabs(tabs_list_sol)
            with tab26:
                st.header(header_list, divider='blue')
                col9,col10= st.columns([5,5])  
                with col9:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if whrlinhas13 == 0:
                            numros = 0
                            numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln14,value=allln14,placeholder="Selecione!",)
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM Ferramentaria"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                           [None,None,None,None,None,None,None,None,None,None,None,None,None,None]
                        
                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Ivson Paulino',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Ivson Paulino',),index=0,placeholder='Atualize',help=help_solicitante)
                        
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                        
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Ferramentaria',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl, ('Ferramentaria',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                                                
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial','Maquina de jatear','Talha El√©trica','Recupera√ß√£o de ferramentas'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                
                with col10:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln14)
                        if allln14 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec4 = allinhas15.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec4)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM Ferramentaria WHERE OS = {numero_da_os};')
                                conn.commit()
                
                if fLIDERES == 'Ivson Paulino':
                    if fSETOR == 'Ferramentaria':
                        if senha == '70':
                            if atd1: 
                                atl1 = st.button('Atualize')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE Ferramentaria SET OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()
                                                                           
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_Ferramentaria = ids_shape + 1
                                    if insdds:
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_Ferramentaria}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_Ferramentaria,str(timenow),datenow,monthnow,Local))    
                                        cursor.execute("INSERT INTO Ferramentaria (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?,?,?,?,?,?, ?, ?, ?,?,?,?,?,?,?,?)", (ids_shape_Ferramentaria , str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_Ferramentaria,bytes_data,monthnow))
                                        conn1.commit()
                                        
            with tab27:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button(' Atualize ‚Üª')
                    with st.expander("Abertas"):
                        if whrlinhas13 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros22 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas13,value=whrlinhas13,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas13)
                            numros23 = numros22-1
                            osespec5 = whrlinhas12.loc[numros23]
                            def load_data():
                                return pd.DataFrame(osespec5)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab28:
                st.header(finalizadas_list, divider='blue')
                st.button(' Atualize ‚Üª ')
                with st.expander("Finalizadas"):
                    if rd1 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros16 = st.number_input("Selecione o numero da   O.S",min_value=1,max_value=rd1,value=rd1,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd1)
                        numros17 = numros16-1
                        osespec6 = rd.loc[numros17]
                        def load_data():
                            return pd.DataFrame(osespec6)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab29:
                st.header (aviso_list,divider='blue')
                omaga = st.multiselect('Selecione:',acao_list,max_selections=1)
                if not omaga == []:
                    corretivas = pd.read_sql_query(f"SELECT * FROM Ferramentaria WHERE A√á√ÉO = '{omaga[0]}'", conn)
                    corretivas_shape = corretivas.shape[0]
                if omaga == []:
                    st.success('Escolha um tipo de a√ß√£o')
                else:
                    if corretivas_shape == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        st.metric(label="O.S Existentes", value=corretivas_shape)
                        numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=corretivas_shape,value=corretivas_shape,placeholder="Selecione!")
                        numros3 = numros2-1
                        serie_pdf = corretivas.loc[numros3]
                        def load_data():
                            return pd.DataFrame(serie_pdf)
                        st.checkbox("Estender", value=True, key="use_container_width17")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width17)
                        dt = corretivas.loc[numros3]
                        dt = dt.tolist()
        
                        with open(f"./Data/geral_Ferramentaria.pdf",'rb') as file:
                            pdf_reader = PyPDF2.PdfReader(file)
                            bttn = st.download_button(
                            label="Exportar O.S üñ®",
                            key= "download_button",
                            data= file,
                            file_name=f"O.S {dt[0]}.pdf",
                            mime='application/octet-stream'
                        )
                        
                        usuario = 'Ferramentaria'
                        cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                        if cursor1.fetchall():
                            cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                            imagens = cursor1.fetchall()
                            oe = imagens[0][1]
                            imagem = Image.open(BytesIO(oe))

                        localx = corretivas.loc[numros3]
                        pmg = localx.tolist()
                        Solicitante = solicitante_titulo
                        Data = 'Data:'
                        Hora = 'Horario:'
                        Setor = 'Setor:'
                        Os = 'O.S:'
                        maqx = local_titulo
                        dados = [Solicitante,Data,Hora,Setor,Os,maqx,'']
                        img = Image.open('./Midia/ssmm.jpg')
                        img1 = Image.open('./Midia/sales.jpeg')

                        def hello(c,pmg):
                            o = 0
                            b = []
                            for s in str(pmg[1]):
                                if s.isalpha():
                                    o += 1
                                    tmh = 4 * o + 58 
                                    b.append(tmh)

                            ct = []
                            for s in str(pmg[2]):
                                if not pmg[2] =='Produ√ß√£o':
                                    if s.isalpha():
                                        o += 1
                                        tmh = 4 * o + 268
                                        ct.append(tmh)
                                    else:
                                        ''
                            idx = 0             
                            for james in dados:
                                idx = idx + 1
                                largura_da_linha = 0.1
                                width, height = 580, 50
                                raio = 10
                                if idx == 1:
                                #SOLICITANTE
                                    t1,t2 = 15,730
                                    t3,t4 = 58,730
                                    t5,t6 = 20,662
                                    t7,t8 = 380,662
                                    t9,t10 = 500,210
                                    t11,t12 = 90,642

                                    texto = f'{pmg[1]}'
                                    text = f'{pmg[5]}'
                                    textox = 'Grau de ocorr√™ncia :'
                                    textoxx = 'Especialidade :'
                                    textos = ''
                                    x1, y1 = b[9], 728
                                    x2, y2 = 58, 728
                                    widt, heigh = 200, 30
                                    r,r1 = 18,630
                                    r2,r3 = 380,630
                                    k1,k2,k3,k4 = 250,680,250,420
                                if idx == 2:
                                #DAT
                                    t1,t2 = 15,705
                                    t3,t4 = 38,705
                                    t5,t6 = 18,583
                                    t7,t8 = 380,583
                                    t9,t10 = 500,210
                                    t11,t12 = 90,563

                                    texto = f'{pmg[6]}'
                                    text = f'{pmg[8]}'
                                    textox = 'A√ß√£o :'
                                    textoxx = 'Data de finaliza√ß√£o :'
                                    textos = ''
                                    x1, y1 = 75, 703
                                    x2, y2 = 37, 703
                                    r,r1 = 18,550
                                    r2,r3 = 380,550
                                    k1,k2,k3,k4 = 350,680,350,420
                                if idx == 3:
                                    #HORA
                                    t1,t2 = 250,730
                                    t3,t4 = 283,730
                                    t5,t6 = 18,513
                                    t7,t8 = 380,513
                                    t9,t10 = 500,210
                                    t11,t12 = 90,493

                                    texto = f'{pmg[7]}'
                                    text = f'{pmg[9]}'
                                    textox = 'Finalizada? :'
                                    textoxx = 'Horario de finaliza√ß√£o :'
                                    textos = ''

                                    x1, y1 = 283, 728
                                    x2, y2 = 310, 728
                                    r,r1 = 18,480
                                    r2,r3 = 380,480
                                    k1,k2,k3,k4 = 500,10,580,10
                                if idx == 4:
                                #SETOR
                                    t1,t2 = 250,705
                                    t3,t4 = 275,705
                                    t5,t6 = 18,422
                                    t9,t10 = 510,15
                                    t11,t12 = 430,642

                                    texto = f'{pmg[2]}'
                                    text = f'{pmg[12]}'
                                    textox = 'Ocorr√™ncia :'
                                    textos = 'Bruno Kappaun'
        
                                    x1, y1 = 275, 703
                                    x2, y2 = ct[0], 703
                                    widt, heigh = 560, 60
                                    r,r1 = 18,360
                                if idx == 5:
                                    #OS
                                    t1,t2 = 430,730
                                    t3,t4 = 448,730
                                    t5,t6 = 25,345
                                    t11,t12 = 430,563

                                    texto = f'N¬∞ 00{pmg[0]}'
                                    text = f'{pmg[10]}'
                                    textox = 'Visualiza√ß√£o do problema:'
                                    x1, y1 = 448, 728
                                    x2, y2 = 475, 728
                                if idx == 6:
                                #maquina
                                    t1,t2 = 430,705
                                    t3,t4 = 455,705
                                    t5,t6 = 30,170
                                    t11,t12 = 430,493
                                    texto =f'{pmg[13]}'
                                    textox = 'Visualiza√ß√£o p√≥s problema:'
                                    text = f'{pmg[11]}'
                                    x1, y1 = 455, 703
                                    x2, y2 = 510, 703
                                if idx == 7:
                                    t11,t12 = 25,410
                                    text = f'{pmg[3]}'
                
                                pdfmetrics.registerFont(TTFont('font', './Fontes/ASENINE_.ttf'))
                                cor_do_texto = (0,0,0)
                                font_name = 'font' 

                                pdfmetrics.registerFont(TTFont('ASS', './Fontes/ASSINATURA.ttf'))
                                cor_do_texto = (0,0,0)
                                font_namex = 'ASS' 
            
                                textobject = c.beginText(t1, t2)
                                textobject.setFont(font_name , 13)
                                textobject.setTextOrigin(t1, t2)
                                textobject.textLine(f"{james}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobject)
                                c.setLineWidth(largura_da_linha)
                                c.line(x1,y1,x2,y2)
        
                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t3, t4)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t3, t4)
                                textobjectx.textLine(f"{texto}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t5, t6)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t5, t6)
                                textobjectx.textLine(f"{textox}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t7, t8)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t7, t8)
                                textobjectx.textLine(f"{textoxx}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t9, t10)
                                textobjectx.setFont(font_namex, 10)
                                textobjectx.setTextOrigin(t9, t10)
                                textobjectx.textLine(f"{textos}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t11, t12)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t11, t12)
                                textobjectx.textLine(f"{text}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                raio = 5
                                c.roundRect(r, r1, widt, heigh, raio, stroke=1, fill=0)

                                width, height = 200, 30
                                raio = 5
                                c.roundRect(r2, r3, width, height, raio, stroke=1, fill=0)
                                c.line(k1,k2,k3,k4)
                            width, height = 700, 50
                            raio = 10
                            r,r1 = 8,800
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)

                            width, height = 580, 680
                            raio = 10
                            r,r1 = 8,0
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)
    
                            x, y = 0,750
                            c.drawInlineImage(img, x,y, width=600,height=100)
                            x, y = 10,180
                            x1,y1 = 10, 20
                            if not corretivas.empty:
                                cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                if cursor1.fetchall():
                                    cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                    imagens = cursor1.fetchall()
                                    imagens
                                    if imagens[0][1]:
                                        oe = imagens[0][1]
                                        imagem = Image.open(BytesIO(oe))
                                        c.drawInlineImage(imagem, x,y, width=400,height=145)  
                                    if imagens[0][2]:
                                        oie = imagens[0][2]
                                        imagem2 = Image.open(BytesIO(oie))
                                        c.drawInlineImage(imagem2, x1,y1, width=400,height=145)
                    
                        c = canvas.Canvas(f"./Data/geral_{usuario}.pdf")
                        hh = hello(c,pmg)
                        c.save()

if fLIDERES == 'Maurilio Sales/Alex Santos':
    if fSETOR == 'Produ√ß√£o':
        if senha == '1405':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl6 = st.button("DELETAR TABELA")
            #if cl6:
                #cursor.execute("DROP TABLE PRODUCAO")
                #conn.commit()
            with ps6:
                st.title(tltle_list)
            st.markdown("---")
            tab30,tab31,tab32,tab33= st.tabs(tabs_list_sol)
            with tab30:
                st.header(header_list, divider='blue')
                col11,col12= st.columns([5,5])  
                with col11:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if allln16 == 0:
                           numros = 0
                           numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln16,value=allln16,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM PRODUCAO"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]
                
                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Maurilio Sales/Alex Santos',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Maurilio Sales/Alex Santos',),index=0,placeholder='Atualize!',help=help_solicitante)
                        
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia!',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Produ√ß√£o',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                        
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl, ('Produ√ß√£o',),index=0,placeholder='Atualize!',help=help_setor)
                        Rsetor = ''

                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, (ocorrencia_list),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,(ocorrencia_list),index=None, placeholder='Atualize!',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, (acao_list),index=None,placeholder='Selecione!',help=helpe_acao)
                        RUacao = ' '
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, (acao_list),index=None,placeholder='Atualize!',help=helpe_acao)
                        Racao = ' '

                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not atd1:
                            segmento = container.selectbox('Defina o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Selecione!',help=help_setor)
                        if atd1:
                            segmento = container.selectbox('Atualize o segmento de produ√ß√£o:', ('Extrus√£o','Estampo','Corte','Rosca e Furo','Embalagem'),index=None,placeholder='Atualize!',help=help_setor)
                        if not segmento == None:
                            comb = (f'{Rsetor} {segmento} {Racao}')
                    else:
                        comb = (f'{Rsetor} {Racao}')
                    
                    if not atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    if atd1:
                        parada = container.selectbox(parada_titulo, ('Sim','N√£o'),index=None,placeholder='Selecione!',help=help_parada)
                    
                    if not atd1: 
                        especialidades = container.selectbox(especialidades_titulo, (especialidade_list),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl, (especialidade_list),index=None,placeholder='Atualize!',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                            
                    if Rsetor == 'Produ√ß√£o' or RUsetor == 'Produ√ß√£o':
                        if not segmento == None:
                            if comb == 'Produ√ß√£o Extrus√£o Corretiva' or comb == 'Produ√ß√£o Extrus√£o Preventiva' or comb == 'Produ√ß√£o Extrus√£o Preditiva':
                                Local = container.selectbox(local_titulo,(extrus√£o_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Extrus√£o Confec√ß√£o' or comb == 'Produ√ß√£o Extrus√£o Montagem':
                                Local = container.selectbox(local_titulo,(extrus√£o_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Estampo Corretiva' or comb == 'Produ√ß√£o Estampo Preventiva' or comb == 'Produ√ß√£o Estampo Preditiva':
                                Local = container.selectbox(local_titulo,(estampo_list),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Estampo Confec√ß√£o' or comb == 'Produ√ß√£o Estampo Montagem':
                                Local = container.selectbox(local_titulo,(estampo_list_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Embalagem Corretiva' or comb == 'Produ√ß√£o Embalagem Preventiva' or comb == 'Produ√ß√£o Embalagem Preditiva':
                                Local = container.selectbox(local_titulo,(embalagem),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Embalagem Confec√ß√£o' or comb == 'Produ√ß√£o Embalagem Montagem':
                                Local = container.selectbox(local_titulo,(embalagem_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Rosca e Furo Corretiva' or comb == 'Produ√ß√£o Rosca e Furo Preventiva' or comb == 'Produ√ß√£o Rosca e Furo Preditiva':
                                Local = container.selectbox(local_titulo,(rosca_e_furo),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Rosca e Furo Confec√ß√£o' or comb == 'Produ√ß√£o Rosca e Furo Montagem':
                                Local = container.selectbox(local_titulo,(rosca_e_furo_√¢),index=None,placeholder= 'Selecione!',help=help_local)
                            
                            if comb == 'Produ√ß√£o Corte Corretiva' or comb == 'Produ√ß√£o Corte Preventiva' or comb == 'Produ√ß√£o Corte Preditiva':
                                Local = container.selectbox(local_titulo,(corte),index=None,placeholder= 'Selecione!',help=help_local)
                            elif comb == 'Produ√ß√£o Corte Confec√ß√£o' or comb == 'Produ√ß√£o Corte Montagem':
                                Local = container.selectbox(local_titulo,(corte_√¢),index=None,placeholder= 'Selecione!',help=help_local) 
                        else:
                            Local =  ' '

                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()

                with col12:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln16)
                        if allln16 == 0:
                            st.success('N√£o h√° Ordens')
                        else:
                            osespec8 = allinhas16.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec8)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=int(preenchimento[0]),max_value=int(preenchimento[0]),value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM PRODUCAO WHERE OS = {numero_da_os};')
                                conn.commit()

                if fLIDERES == 'Maurilio Sales/Alex Santos':
                    if fSETOR == 'Produ√ß√£o':
                        if senha == '1405':
                            if atd1:
                                atl1 = st.button('Atualize ‚Üª')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE PRODUCAO SET  OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ?, MANUTENTOR = ?,SEGMENTO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,manutentor,segmento,int(preenchimento[0])))
                                    conn.commit()                           
                                       
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)
                            
                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                    
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_producao = ids_shape + 1
                                    if insdds:
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_producao}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_producao,str(timenow),datenow,monthnow,Local))                      
                                        cursor.execute("INSERT INTO PRODUCAO (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA,SEGMENTO) VALUES (?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)", (ids_shape_producao , str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,parada,segmento))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_producao,bytes_data,monthnow))
                                        conn1.commit()
            with tab31:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button(' Atualize  ‚Üª ')
                    with st.expander("Abertas"):
                        if whrlinhas19 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros22 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas19,value=whrlinhas19,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas19)
                            numros23 = numros22-1
                            osespec9 = whrlinhas18.loc[numros23]
                            def load_data():
                                return pd.DataFrame(osespec9)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab32:
                st.header(finalizadas_list, divider='blue')
                st.button(' Atualize   ‚Üª ')
                with st.expander("Finalizadas"):
                    if rd5 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros18 = st.number_input("Selecione o numero da   OS",min_value=1,max_value=rd5,value=rd5,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd5)
                        numros19 = numros18-1
                        osespec10 = rd4.loc[numros19]
                        def load_data():
                            return pd.DataFrame(osespec10)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab33:
                st.header (aviso_list,divider='blue')
                omaga = st.multiselect('Selecione:',acao_list,max_selections=1)
                if not omaga == []:
                    corretivas = pd.read_sql_query(f"SELECT * FROM PRODUCAO WHERE A√á√ÉO = '{omaga[0]}'", conn)
                    corretivas_shape = corretivas.shape[0]
                if omaga == []:
                    st.success('Escolha um tipo de a√ß√£o')
                else:
                    if corretivas_shape == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        st.metric(label="O.S Existentes", value=corretivas_shape)
                        numros2 = st.number_input("Selecione o numero da O.S",min_value=1,max_value=corretivas_shape,value=corretivas_shape,placeholder="Selecione!")
                        numros3 = numros2-1
                        serie_pdf = corretivas.loc[numros3]
                        def load_data():
                            return pd.DataFrame(serie_pdf)
                        st.checkbox("Estender", value=True, key="use_container_width17")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width17)
                        dt = corretivas.loc[numros3]
                        dt = dt.tolist()
    
                        with open(f"./Data/geral_Produ√ß√£o.pdf", 'rb') as file:
                            pdf_reader = PyPDF2.PdfReader(file)
                            bttn = st.download_button(
                            label="Exportar O.S üñ®",
                            key= "download_button",
                            data= file,
                            file_name=f"O.S {dt[0]}.pdf",
                            mime='application/octet-stream'
                        )
                        usuario = 'Produ√ß√£o'
                        cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                        if cursor1.fetchall():
                            cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                            imagens = cursor1.fetchall()
                            oe = imagens[0][1]
                            imagem = Image.open(BytesIO(oe))
                        localx = corretivas.loc[numros3]
                        pmg = localx.tolist()
                        Solicitante = solicitante_titulo
                        Data = 'Data:'
                        Hora = 'Horario:'
                        Setor = 'Setor:'
                        Os = 'O.S:'
                        maqx = local_titulo
                        dados = [Solicitante,Data,Hora,Setor,Os,maqx,'']
                        img = Image.open('./Midia/ssmm.jpg')
                        img1 = Image.open('./Midia/sales.jpeg')

                        def hello(c,pmg):
                            o = 0
                            b = []
                            for s in str(pmg[1]):
                                if s.isalpha():
                                    o += 1
                                    tmh = 4 * o + 58 
                                    b.append(tmh)

                            ct = []
                            for s in str(pmg[2]):
                                if not pmg[2] =='Produ√ß√£o':
                                    if s.isalpha():
                                        o += 1
                                        tmh = 4 * o + 268
                                        ct.append(tmh)
                                    else:
                                        ''
                            idx = 0             
                            for james in dados:
                                idx = idx + 1
                                largura_da_linha = 0.1
                                width, height = 580, 50
                                raio = 10
                                if idx == 1:
                                #SOLICITANTE
                                    t1,t2 = 15,730
                                    t3,t4 = 58,730
                                    t5,t6 = 20,662
                                    t7,t8 = 380,662
                                    t9,t10 = 500,210
                                    t11,t12 = 90,642

                                    texto = f'{pmg[1]}'
                                    text = f'{pmg[5]}'
                                    textox = 'Grau de ocorr√™ncia :'
                                    textoxx = 'Especialidade :'
                                    textos = ''
                                    x1, y1 = b[9], 728
                                    x2, y2 = 58, 728
                                    widt, heigh = 200, 30
                                    r,r1 = 18,630
                                    r2,r3 = 380,630
                                    k1,k2,k3,k4 = 250,680,250,420
                                if idx == 2:
                                #DAT
                                    t1,t2 = 15,705
                                    t3,t4 = 38,705
                                    t5,t6 = 18,583
                                    t7,t8 = 380,583
                                    t9,t10 = 500,210
                                    t11,t12 = 90,563

                                    texto = f'{pmg[6]}'
                                    text = f'{pmg[8]}'
                                    textox = 'A√ß√£o :'
                                    textoxx = 'Data de finaliza√ß√£o :'
                                    textos = ''
                                    x1, y1 = 75, 703
                                    x2, y2 = 37, 703
                                    r,r1 = 18,550
                                    r2,r3 = 380,550
                                    k1,k2,k3,k4 = 350,680,350,420
                                if idx == 3:
                                    #HORA
                                    t1,t2 = 250,730
                                    t3,t4 = 283,730
                                    t5,t6 = 18,513
                                    t7,t8 = 380,513
                                    t9,t10 = 500,210
                                    t11,t12 = 90,493

                                    texto = f'{pmg[7]}'
                                    text = f'{pmg[9]}'
                                    textox = 'Finalizada? :'
                                    textoxx = 'Horario de finaliza√ß√£o :'
                                    textos = ''

                                    x1, y1 = 283, 728
                                    x2, y2 = 310, 728
                                    r,r1 = 18,480
                                    r2,r3 = 380,480
                                    k1,k2,k3,k4 = 500,10,580,10
                                if idx == 4:
                                #SETOR
                                    t1,t2 = 250,705
                                    t3,t4 = 275,705
                                    t5,t6 = 18,422
                                    t9,t10 = 510,15
                                    t11,t12 = 430,642

                                    texto = f'{pmg[2]}'
                                    text = f'{pmg[12]}'
                                    textox = 'Ocorr√™ncia :'
                                    textos = 'Bruno Kappaun'
        
                                    x1, y1 = 275, 703
                                    x2, y2 = ct[0], 703
                                    widt, heigh = 560, 60
                                    r,r1 = 18,360
                                if idx == 5:
                                    #OS
                                    t1,t2 = 430,730
                                    t3,t4 = 448,730
                                    t5,t6 = 25,345
                                    t11,t12 = 430,563

                                    texto = f'N¬∞ 00{pmg[0]}'
                                    text = f'{pmg[10]}'
                                    textox = 'Visualiza√ß√£o do problema:'
                                    x1, y1 = 448, 728
                                    x2, y2 = 475, 728
                                if idx == 6:
                                #maquina
                                    t1,t2 = 430,705
                                    t3,t4 = 455,705
                                    t5,t6 = 30,170
                                    t11,t12 = 430,493
                                    texto =f'{pmg[13]}'
                                    textox = 'Visualiza√ß√£o p√≥s problema:'
                                    text = f'{pmg[11]}'
                                    x1, y1 = 455, 703
                                    x2, y2 = 510, 703
                                if idx == 7:
                                    t11,t12 = 25,410
                                    text = f'{pmg[3]}'
                
                                pdfmetrics.registerFont(TTFont('font', './Fontes/ASENINE_.ttf'))
                                cor_do_texto = (0,0,0)
                                font_name = 'font' 

                                pdfmetrics.registerFont(TTFont('ASS', './Fontes/ASSINATURA.ttf'))
                                cor_do_texto = (0,0,0)
                                font_namex = 'ASS' 
            
                                textobject = c.beginText(t1, t2)
                                textobject.setFont(font_name , 13)
                                textobject.setTextOrigin(t1, t2)
                                textobject.textLine(f"{james}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobject)
                                c.setLineWidth(largura_da_linha)
                                c.line(x1,y1,x2,y2)
        
                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t3, t4)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t3, t4)
                                textobjectx.textLine(f"{texto}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t5, t6)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t5, t6)
                                textobjectx.textLine(f"{textox}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t7, t8)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t7, t8)
                                textobjectx.textLine(f"{textoxx}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,0)
                                textobjectx = c.beginText(t9, t10)
                                textobjectx.setFont(font_namex, 10)
                                textobjectx.setTextOrigin(t9, t10)
                                textobjectx.textLine(f"{textos}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                cor_do_texto = (0,0,1)
                                textobjectx = c.beginText(t11, t12)
                                textobjectx.setFont(font_name, 10)
                                textobjectx.setTextOrigin(t11, t12)
                                textobjectx.textLine(f"{text}")
                                c.setFillColor(cor_do_texto)
                                c.drawText(textobjectx)

                                raio = 5
                                c.roundRect(r, r1, widt, heigh, raio, stroke=1, fill=0)

                                width, height = 200, 30
                                raio = 5
                                c.roundRect(r2, r3, width, height, raio, stroke=1, fill=0)
                                c.line(k1,k2,k3,k4)
                            width, height = 700, 50
                            raio = 10
                            r,r1 = 8,800
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)

                            width, height = 580, 680
                            raio = 10
                            r,r1 = 8,0
                            c.roundRect(r, r1, width, height, raio, stroke=1, fill=0)

                            x, y = 0,750
                            c.drawInlineImage(img, x,y, width=600,height=100)
                            x, y = 10,180
                            x1,y1 = 10, 20
                            if not corretivas.empty:
                                cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                if cursor1.fetchall():
                                    cursor1.execute(f'SELECT * FROM imagens WHERE id = {dt[0]}')
                                    imagens = cursor1.fetchall()
                                    imagens
                                    if imagens[0][1]:
                                        oe = imagens[0][1]
                                        imagem = Image.open(BytesIO(oe))
                                        c.drawInlineImage(imagem, x,y, width=400,height=145)  
                                    if imagens[0][2]:
                                        oie = imagens[0][2]
                                        imagem2 = Image.open(BytesIO(oie))
                                        c.drawInlineImage(imagem2, x1,y1, width=400,height=145)   
                    
                        c = canvas.Canvas(f"./Data/geral_{usuario}.pdf")
                        hh = hello(c,pmg)
                        c.save()

#Administrativo
#GERAL Administrativo
allln17 = pd.read_sql_query("SELECT * FROM Administrativo", conn)
allln18 = allln17.shape[0]
consulta2 = "SELECT * FROM Administrativo"
allinhas17 = pd.read_sql_query(consulta2, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta3 = "SELECT * FROM Administrativo WHERE FINALIZADA = 'N√£o'"
whrlinhas23 = pd.read_sql_query(consulta3, conn)
whrlinhas24 = whrlinhas23.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM Administrativo WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas25 = cursor.fetchall()
whrlinhas26 = pd.DataFrame(whrlinhas25)
whrlinhas27 = whrlinhas26.shape[0]

if fLIDERES == 'Gilson Freitas':
    if fSETOR == 'Administrativo':
        if senha == '1404':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl7 = st.button("DELETAR TABELA")
            #if cl7:
                #cursor.execute("DROP TABLE Administrativo")
                #conn.commit()
            with ps6:
                st.title(tltle_list)

            st.markdown("---")
            tab34,tab35,tab36,tab37= st.tabs(tabs_list_sol)
            with tab34:
                st.header(header_list, divider='blue')
                col13,col14= st.columns([5,5])  
                with col13:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if allln18 == 0:
                            numros = 0
                            numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln18 ,value=allln18 ,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM Administrativo"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]
                        
                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Gilson Freitas',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(setor_titulo_atl ('Gilson Freitas',),index=0,placeholder='Atualize',help=help_solicitante)
                    
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Administrativo',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl,('Administrativo',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                                        
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial','Casa de Bombas','Caixa D.Agua','Subesta√ß√£o - 01','Subesta√ß√£o - 02','Port√£o de automoveis','Port√£o de pedestres','Interfone'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()

                with col14:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln18)
                        if allln18 ==0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            osespec12 = allinhas17.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec12)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM Administrativo WHERE OS = {numero_da_os};')
                                conn.commit()
                
                if fLIDERES == 'Gilson Freitas':
                    if fSETOR == 'Administrativo':
                        if senha == '1404':
                            if atd1: 
                                atl1 = st.button('Atualize ‚Üª')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE Administrativo SET OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()
                                                               
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                    
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_Administrativo = ids_shape + 1
                                    if insdds:
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_Administrativo}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_Administrativo,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO Administrativo (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?,?,?,?,?, ?,  ?,?, ?, ?,?,?,?,?,?,?)", (ids_shape_Administrativo , str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()
                                        
            with tab35:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button(' Atualize ‚Üª  ')
                    with st.expander("Abertas"):
                        if whrlinhas24 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros22 = st.number_input("Selecione o numero da  O.S",min_value=1,max_value=whrlinhas24,value=whrlinhas24,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas24)
                            numros23 = numros22-1
                            osespec13 = whrlinhas23.loc[numros23]
                            def load_data():
                                return pd.DataFrame(osespec13)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab36:
                st.header(finalizadas_list, divider='blue')
                st.button('Atualize ‚Üª        ')
                with st.expander("Finalizadas"):
                    if rd9 == 0:
                        st.success('N√£o h√° pend√™ncias')
                        
                    else:
                        numros20 = st.number_input("Selecione o numero da   O.S",min_value=1,max_value=rd9,value=rd9,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd9)
                        numros21 = numros20-1
                        osespec14 = rd8.loc[numros21]
                        def load_data():
                            return pd.DataFrame(osespec14)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab37:
                st.header(aviso_list, divider='blue')
                st.button('Atualize ‚Üª   ')
                with st.expander("Geral"):
                    if allln18 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros20 = st.number_input("Selecione o numero da    O.S",min_value=1,max_value=allln18,value=allln18,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= allln18)
                        numros21 = numros20-1
                        osespec15 = allln17.loc[numros21]
                        def load_data():
                            return pd.DataFrame(osespec15)
                        st.checkbox("Estender", value=True, key= "use_container_width3")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width3)

#GERAL Comercial
allln19 = pd.read_sql_query("SELECT * FROM Comercial", conn)
allln20 = allln19.shape[0]
consulta2 = "SELECT * FROM Comercial"
allinhas18 = pd.read_sql_query(consulta2, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta3 = "SELECT * FROM Comercial WHERE FINALIZADA = 'N√£o'"
whrlinhas28 = pd.read_sql_query(consulta3, conn)
whrlinhas29 = whrlinhas28.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM Comercial WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas30 = cursor.fetchall()
whrlinhas31 = pd.DataFrame(whrlinhas30)
whrlinhas32 = whrlinhas31.shape[0]

if fLIDERES == 'Adriely Lemos':
    if fSETOR == 'Comercial':
        if senha == '1403':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl8 = st.button("DELETAR TABELA")
            #if cl8:
                #cursor.execute("DROP TABLE Comercial")
                #conn.commit()
            with ps6:
                st.title(tltle_list)
            st.markdown("---")
            tab38,tab39,tab40,tab41= st.tabs(tabs_list_sol)
            with tab38:
                st.header(header_list, divider='blue')
                col15,col16= st.columns([5,5])  
                with col15:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if whrlinhas29 == 0:
                            numros = 0
                            numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=whrlinhas29 ,value=whrlinhas29 ,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM Comercial"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]

                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Adriely Lemos',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Adriely Lemos',),index=0,placeholder='Atualize',help=help_solicitante)
                    
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atlvalue=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Comercial',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl,('Comercial',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                                        
                            
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()

                with col16:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln20)
                        if allln20 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:    
                            osespec16 = allinhas18.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec16)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM Comercial WHERE OS = {numero_da_os};')
                                conn.commit()
                
                if 'OS' not in st.session_state:
                    st.session_state.OS = 0
                            
                if fLIDERES == 'Adriely Lemos':
                    if fSETOR == 'Comercial':
                        if senha == '1403':
                            if atd1: 
                                atl1 = st.button('Atualize ‚Üª')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE Comercial SET OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()
                                                       
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_Comercial = ids_shape + 1
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_Comercial}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_Comercial,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO Comercial (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?, ?,?,?,? ,?, ?, ?, ?,?,?,?,?,?,?,?)", (ids_shape_Comercial , str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()
                                             
            with tab39:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button('  Atualize ‚Üª ')
                    with st.expander("Abertas"):
                        if whrlinhas29 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros22 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas29,value=whrlinhas29,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas29)
                            numros23 = numros22-1
                            osespec17 = whrlinhas28.loc[numros23]
                            def load_data():
                                return pd.DataFrame(osespec17)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab40:
                st.header(finalizadas_list, divider='blue')
                st.button(' Atualize ‚Üª  ' )
                with st.expander("Finalizadas"):
                    if rd13 == 0:
                        st.success('N√£o h√° pend√™ncias')
                        
                    else:
                        numros22 = st.number_input("Selecione o numero da   OS",min_value=1,max_value=rd13,value=rd13,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd13)
                        numros23 = numros22-1
                        osespec18 = rd12.loc[numros23]
                        def load_data():
                            return pd.DataFrame(osespec18)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab41:
                st.header(aviso_list, divider='blue')
                st.button(' Atualize ‚Üª ')
                with st.expander("Geral"):
                    if allln20 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros22 = st.number_input("Selecione o numero da    OS",min_value=1,max_value=allln20,value=allln20,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= allln20)
                        numros23 = numros22-1
                        osespec19 = allln19.loc[numros23]
                        def load_data():
                            return pd.DataFrame(osespec19)
                        st.checkbox("Estender", value=True, key= "use_container_width3")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width3)

#EXPEDICAO
#GERAL EXPEDICAO
allln21 = pd.read_sql_query("SELECT * FROM EXPEDICAO", conn)
allln22 = allln21.shape[0]
consulta2 = "SELECT * FROM EXPEDICAO"
allinhas19 = pd.read_sql_query(consulta2, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta3 = "SELECT * FROM EXPEDICAO WHERE FINALIZADA = 'N√£o'"
whrlinhas33 = pd.read_sql_query(consulta3, conn)
whrlinhas34 = whrlinhas33.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM EXPEDICAO WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas35 = cursor.fetchall()
whrlinhas36 = pd.DataFrame(whrlinhas35)
whrlinhas37 = whrlinhas36.shape[0]

if fLIDERES == 'Willian Oliveira':
    if fSETOR == 'Expedi√ß√£o':
        if senha == '1402':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl9 = st.button("DELETAR TABELA")
            #if cl9:
                #cursor.execute("DROP TABLE EXPEDICAO")
                #conn.commit()
            with ps6:
                st.title(tltle_list)

            st.markdown("---")
            tab42,tab43,tab44,tab45= st.tabs(tabs_list_sol)
            with tab42:
                st.header(header_list, divider='blue')
                col17,col18= st.columns([5,5])  
                with col17:
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if whrlinhas34 == 0:
                            numros1 = 0
                            numros = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln22,value=allln22,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM EXPEDICAO"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]
                        
                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Willian Oliveira',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Willian Oliveira',),index=0,placeholder='Atualize',help=help_solicitante)
                    
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Expedi√ß√£o',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl,('Expedi√ß√£o',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                   
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()

                with col18:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln22)
                        if allln22 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:    
                            osespec20 = allinhas19.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec20)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM EXPEDICAO WHERE OS = {numero_da_os};')
                                conn.commit()
            
                if fLIDERES == 'Willian Oliveira':
                    if fSETOR == 'Expedi√ß√£o':
                        if senha == '1402':  
                            if atd1: 
                                atl1 = st.button('Atualize  ‚Üª')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE EXPEDICAO SET OCORRENCIA = ?,GRAU = ?,A√á√ÉO = ? WHERE OS = ?",(Rstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()                                            
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_expedicao = ids_shape + 1
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_expedicao}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_expedicao,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO EXPEDICAO (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?,?,?,?,?, ?,?, ?, ?, ?,?,?,?,?,?,?)", (ids_shape_expedicao, str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()
                                    
            with tab43:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button('Atualize ‚Üª')
                    with st.expander("Abertas"):
                        if whrlinhas34 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros24 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas34,value=whrlinhas34,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas34)
                            numros25 = numros24-1
                            osespec21 = whrlinhas33.loc[numros25]
                            def load_data():
                                return pd.DataFrame(osespec21)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab44:
                st.header(finalizadas_list, divider='blue')
                st.button('Atualize ‚Üª ')
                with st.expander("Finalizadas"):
                    if rd17 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros24 = st.number_input("Selecione o numero da   OS",min_value=1,max_value=rd17,value=rd17,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd17)
                        numros25 = numros24-1
                        osespec22 = rd16.loc[numros25]
                        def load_data():
                            return pd.DataFrame(osespec22)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab45:
                st.header(aviso_list, divider='blue')
                st.button('Atualize ‚Üª  ')
                with st.expander("Geral"):
                    if allln22 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros24 = st.number_input("Selecione o numero da    OS",min_value=1,max_value=allln22,value=allln22,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= allln22)
                        numros25 = numros24-1
                        osespec23 = allln21.loc[numros25]
                        def load_data():
                            return pd.DataFrame(osespec23)
                        st.checkbox("Estender", value=True, key= "use_container_width3")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width3)

#Serralharia
#GERAL Serralharia
allln23 = pd.read_sql_query("SELECT * FROM Serralharia", conn)
allln24 = allln23.shape[0]
consulta2 = "SELECT * FROM Serralharia"
allinhas20 = pd.read_sql_query(consulta2, conn)

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta3 = "SELECT * FROM Serralharia WHERE FINALIZADA = 'N√£o'"
whrlinhas38 = pd.read_sql_query(consulta3, conn)
whrlinhas39 = whrlinhas38.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM Serralharia WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas40 = cursor.fetchall()
whrlinhas41 = pd.DataFrame(whrlinhas40)
whrlinhas42 = whrlinhas41.shape[0]

if fLIDERES == 'Cesar Augusto':
    if fSETOR == 'Serralharia':
        if senha == '1401':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl10 = st.button("DELETAR TABELA")
            #if cl10:
                #cursor.execute("DROP TABLE Serralharia")
                #conn.commit()
            with ps6:
                st.title(tltle_list)

            st.markdown("---")
            tab46,tab47,tab48,tab49= st.tabs(tabs_list_sol)
            with tab46:
                st.header(header_list, divider='blue')
                col19,col20= st.columns([5,5])  
                with col19:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if whrlinhas39 == 0:
                            numros = 0
                            numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln24 ,value=allln24 ,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM Serralharia"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]

                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Cesar Augusto',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Cesar Augusto',),index=0,placeholder='Atualize',help=help_solicitante)
                    
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Serralharia',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl,('Serralharia',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                                          
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial','Rosqueadeira - COSSINETE 01','Rosqueadeira - COSSINETE 02','Serra fita - FRANHO'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()

                with col20:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln24)
                        if allln24 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:    
                            osespec24 = allinhas20.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec24)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=preenchimento[0],placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM Serralharia WHERE OS = {numero_da_os};')
                                conn.commit()
 
                if fLIDERES == 'Cesar Augusto':
                    if fSETOR == 'Serralharia':
                        if senha == '1401':
                            if atd1: 
                                atl1 = st.button('Atualize ‚Üª       ')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE Serralharia SET OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()
                                     
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[7] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_Serralharia = ids_shape + 1
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_Serralharia}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_Serralharia,str(timenow),datenow,monthnow,Local))
                                        cursor.execute("INSERT INTO Serralharia (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?,?,?,?,?, ?, ?, ?, ?,?,?,?,?,?,?,?)", (ids_shape_Serralharia, str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()
                                                    
            with tab47:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button('Atualize ‚Üª')
                    with st.expander("Abertas"):
                        if whrlinhas39 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros26 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas39,value=whrlinhas39,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas39)
                            numros27 = numros26-1
                            osespec25 = whrlinhas38.loc[numros27]
                            def load_data():
                                return pd.DataFrame(osespec25)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab48:
                st.header(finalizadas_list, divider='blue')
                st.button('Atualize ‚Üª ')
                with st.expander("Finalizadas"):
                    if rd21 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros26 = st.number_input("Selecione o numero da   OS",min_value=1,max_value=rd21,value=rd21,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd21)
                        numros27 = numros26-1
                        osespec26 = rd20.loc[numros27]
                        def load_data():
                            return pd.DataFrame(osespec26)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)

            with tab49:
                st.header(aviso_list, divider='blue')
                st.button('Atualize ‚Üª  ')
                with st.expander("Geral"):
                    if allln24 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros26 = st.number_input("Selecione o numero da    OS",min_value=1,max_value=allln24,value=allln24,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= allln24)
                        numros27 = numros26-1
                        osespec27 = allln23.loc[numros27]
                        def load_data():
                            return pd.DataFrame(osespec27)
                        st.checkbox("Estender", value=True, key= "use_container_width3")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width3)

query = "SELECT * FROM TI WHERE FINALIZADA = 'N√£o'"
rd70 = pd.read_sql_query(query, conn)
rd71 = rd70.shape[0]

query1 = "SELECT * FROM TI WHERE FINALIZADA = 'Sim'"
rd72 = pd.read_sql_query(query1, conn)
rd73 = rd72.shape[0]

allln25 = pd.read_sql_query("SELECT * FROM TI", conn)
allln26 = allln25.shape[0]

#O.S ABERTAS  N√ÉO FINALIZADAS
consulta3 = "SELECT * FROM TI WHERE FINALIZADA = 'N√£o'"
whrlinhas43 = pd.read_sql_query(consulta3, conn)
whrlinhas44 = whrlinhas43.shape[0]

#O.S FINALIZADAS
cursor.execute("SELECT * FROM TI WHERE FINALIZADA = ?;", ('Sim',))
whrlinhas45 = cursor.fetchall()
whrlinhas46 = pd.DataFrame(whrlinhas45)
whrlinhas47 = whrlinhas46.shape[0]

if fLIDERES == 'Filipe Leite':
    if fSETOR == 'Tecnologia da Informa√ß√£o':
        if senha == '69':
            image = Image.open('./Midia/ssmm.jpg')
            ps6,ps7= st.columns(2)
            #cl11 = st.button("DELETAR TABELA")
            #if cl11:
                #cursor.execute("DROP TABLE TI")
                #conn.commit()
            with ps6:
                st.title(tltle_list)

            st.markdown("---")
            tab50,tab51,tab52,tab53= st.tabs(tabs_list_sol)
            with tab50:
                st.header(header_list, divider='blue')
                col21,col22= st.columns([5,5])  
                with col21:                  
                    atd1 = st.toggle('Atualizar os dados')
                    if atd1:
                        if whrlinhas44 == 0:
                            numros = 0
                            numros1 = 0
                        else:
                            numros = st.number_input("Navegue por suas O.S para atualizar-las",min_value=1,max_value=allln26 ,value=allln26 ,placeholder="Selecione!")
                            numros1 = numros-1
                            consulta1 = "SELECT * FROM TI"
                        ros_oc = pd.read_sql_query(consulta1, conn)
                        if not ros_oc.empty:
                            preenchimento = ros_oc.loc[numros1]
                            preenchimento = preenchimento.tolist()
                        else:
                            [None,None,None,None,None,None,None,None,None,None,None,None,None,None]

                    container = st.container(border=True)
                    if not atd1:
                        Rsolicitante = container.selectbox(solicitante_titulo, ('Filipe Leite',),index=0,placeholder='Selecione!',help=help_solicitante)
                    if atd1:
                        RUsolicitante = container.selectbox(solicitante_titulo_atl, ('Filipe Leite',),index=0,placeholder='Atualize',help=help_solicitante)
                    
                    if not atd1:
                        Rstatus = container.text_area(ocorrencia_titulo,value=None,placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    if atd1:
                        RUstatus = container.text_area(ocorrencia_titulo_atl,value=preenchimento[3],placeholder='Insira sua oc√¥rrencia',help=help_ocorr√™ncia)
                    
                    if not atd1:
                        Rsetor = container.selectbox(setor_titulo, ('Tecnologia da Informa√ß√£o',),index=0,placeholder='Selecione!',help=help_setor)
                        RUsetor = ''
                    if atd1:
                        RUsetor = container.selectbox(setor_titulo_atl,('Tecnologia da Informa√ß√£o',),index=0,placeholder='Atualize',help=help_setor)
                        Rsetor = ''
                    
                    if not atd1:
                        Rniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo, ('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None,placeholder='Selecione!',help=help_nivel_ocorrencia)
                    if atd1:
                        RUniveldaocorrencia = container.selectbox(nivel_de_ocorrencia_titulo_atl,('Emerg√™ncia','Muito urg√™nte','Pouco urg√™nte','Urg√™nte'),index=None, placeholder='Atualize',help=help_nivel_ocorrencia)

                    if not atd1:
                        Racao = container.selectbox(acao_titulo, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Selecione!',help=helpe_acao)
                    if atd1:
                        RUacao = container.selectbox(acao_titulo_atl, ('Corretiva','Preventiva','Preditiva'),index=None,placeholder='Atualize',help=helpe_acao)

                    if not atd1:
                        especialidades = container.selectbox(especialidades_titulo, ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Selecione!',help=help_especialidade)
                    if atd1:
                        especialidades = container.selectbox(especialidades_titulo_atl ('Falhas El√©tricas','El√©tr√¥nica','Rede Industrial','Desgaste Mec√¢nico','Erro de Logica','Problemas Hidraulicos','Problemas Pneumaticas','Lubrifica√ß√£o','Problemas T√©rmicos','Falhas na Automa√ß√£o','Problemas de Software','Impactos externos','Aferi√ß√£o','Reinstala√ß√£o','Instala√ß√£o','Recupera√ß√£o','Melhoria','Reabastecimento','Ajuste','Instala√ß√£o e Ajuste','Reinstala√ß√£o e Ajuste','Soldagem'),index=None,placeholder='Atualize',help=help_especialidade)
                    
                    if not atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                    if atd1:
                        manutentor = container.selectbox(manutentor_titulo, ('El√©trica','Mec√¢nica'),index=None,placeholder='Selecione!',help=help_manutentor)
                                        
                    if Rsetor != 'Extrus√£o' and Rsetor != 'Produ√ß√£o' and Rsetor != 'Utilidades' and RUsetor != 'Extrus√£o' and RUsetor != 'Produ√ß√£o' and RUsetor != 'Utilidades':
                        Local = container.selectbox(local_titulo,('Manuten√ß√£o Predial'),index=None,placeholder= 'Selecione!',help=help_local)
                    
                    if atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:

                            bytes_data = uploaded_file.read()
                    if not atd1:   
                        uploaded_files = container.file_uploader("Envie uma imagem da ocorr√™ncia:", accept_multiple_files=True,help=help_imagem)
                        for uploaded_file in uploaded_files:
                            bytes_data = uploaded_file.read()
                
                with col22:
                    if atd1:
                        st.metric(label="O.S Existentes", value= allln26)
                        if allln26 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:    
                            osespec28 = allln25.loc[numros1]
                            def load_dataa():
                                return pd.DataFrame(osespec28)
                            st.checkbox("Estender", value=True, key="use_container_width")
                            df = load_dataa()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width)
                            numero_da_os = st.number_input("Selecione o numero da O.S que deseja DELETAR",min_value=1,max_value=1000,value=int(preenchimento[0]),placeholder="Selecione!")
                            dell = st.button('Excluir üóë')
                            if dell:
                                st.toast(f'Deletando O.S!')
                                time.sleep(0.5)
                                st.toast(f'O.S [{numero_da_os}] Deletada!')
                                cursor.execute(f'DELETE FROM TI WHERE OS = {numero_da_os};')
                                conn.commit()
                                     
                if fLIDERES == 'Filipe Leite':
                    if fSETOR == 'Tecnologia da Informa√ß√£o':
                        if senha == '69':
                            if atd1: 
                                atl1 = st.button('  Atualize ‚Üª  ')
                                if atl1:
                                    st.balloons()
                                    st.toast('Atualizando O.S!')
                                    time.sleep(0.5)
                                    cursor.execute("UPDATE TI SET OCORRENCIA = ?,GRAU = ?, A√á√ÉO = ? WHERE OS = ?",(RUstatus,RUniveldaocorrencia,RUacao,int(preenchimento[0])))
                                    conn.commit()
                                    conn.close()
                                                                                     
                            else:
                                omaga = [Rsolicitante,Rstatus,Rsetor,Rniveldaocorrencia,Racao,especialidades,Local,uploaded_files]
                                bools = []
                                for busca in omaga:
                                    if not busca:
                                        bools.append(False)
                                    else:
                                        bools.append(True)

                                if bools[0] == True and bools[1] == True and bools[2] == True and bools[3] == True and bools[4] == True and bools[5] == True and bools[6] == True and bools[7] == True and bools[8] == True:
                                    insdds = st.button("Enviar O.S üì§")
                                    if insdds:
                                        ids_shape_ti = ids_shape + 1
                                        st.balloons()                     
                                        st.toast('Enviando O.S!')
                                        time.sleep(0.5)
                                        st.toast(f'O.S [{ids_shape_ti}] Enviada!')
                                        cursor.execute('PRAGMA foreign_keys = ON;')
                                        cursor.execute("INSERT INTO ids (ID_UNIC,HORA,DATA,M√™s,MAQUINA) VALUES (?,?,?,?,?)", (ids_shape_ti,str(timenow),datenow,monthnow,Local))                                     
                                        cursor.execute("INSERT INTO TI (OS,SOLICITANTE,SETOR,OCORRENCIA,GRAU,DATA,HORA,A√á√ÉO,FINALIZADA,DATAF,HORAF,MANUTENTOR,ESPECIALIDADE,Local,M√äS,PARADA) VALUES (?,?,?,?,?,?, ?, ?, ?, ?,?,?,?,?,?,?)", (ids_shape_ti, str(Rsolicitante), str(Rsetor), str(Rstatus),str(Rniveldaocorrencia),datenow,str(timenow),Racao,'N√£o',None,None,manutentor,especialidades,Local,monthnow,'Sim'))
                                        conn.commit()
                                        cursor1.execute("INSERT INTO imagens (id,imagem_abertura,mes) VALUES (?,?,?)", (ids_shape_mecanica,bytes_data,monthnow))
                                        conn1.commit()
                                        conn.close()

            with tab51:
                statuses,sats,statuses1=st.columns([80,0.1,0.1])
                with statuses:
                    st.header(abertas_list, divider='blue')
                    st.button('Atualize ‚Üª')
                    with st.expander("Abertas"):
                        if whrlinhas44 == 0:
                            st.success('N√£o h√° pend√™ncias')
                        else:
                            numros28 = st.number_input("Selecione o numero da  OS",min_value=1,max_value=whrlinhas44,value=whrlinhas44,placeholder="Selecione!")
                            st.metric(label="O.S Existentes", value= whrlinhas44)
                            numros29 = numros28-1
                            osespec29 = whrlinhas43.loc[numros29]
                            def load_data():
                                return pd.DataFrame(osespec29)
                            st.checkbox("Estender", value=True, key="use_container_width1")
                            df = load_data()
                            st.dataframe(df, use_container_width=st.session_state.use_container_width1)

            with tab52:
                st.header(finalizadas_list, divider='blue')
                st.button('Atualize ‚Üª ')
                with st.expander("Finalizadas"):
                    if rd73 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros28 = st.number_input("Selecione o numero da   OS",min_value=1,max_value=rd73,value=rd73,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= rd73)
                        numros29 = numros28-1
                        osespec30 = rd72.loc[numros29]
                        def load_data():
                            return pd.DataFrame(osespec30)
                        st.checkbox("Estender", value=True, key="use_container_width2")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width2)
            
            with tab53:
                st.header(aviso_list, divider='blue')
                st.button('Atualize ‚Üª  ')
                with st.expander("Geral"):  
                    if allln26 == 0:
                        st.success('N√£o h√° pend√™ncias')
                    else:
                        numros28 = st.number_input("Selecione o numero da    OS",min_value=1,max_value=allln26,value=allln26,placeholder="Selecione!")
                        st.metric(label="O.S Existentes", value= allln26)
                        numros29 = numros28-1
                        osespec31 = allln25.loc[numros29]
                        def load_data():
                            return pd.DataFrame(osespec31)
                        st.checkbox("Estender", value=True, key= "use_container_width3")
                        df = load_data()
                        st.dataframe(df, use_container_width=st.session_state.use_container_width3)
